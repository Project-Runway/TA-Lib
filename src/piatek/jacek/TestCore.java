package piatek.jacek;

import static org.junit.Assert.assertArrayEquals;

import org.junit.BeforeClass;
import org.junit.Test;
import org.omg.CORBA.portable.ValueBase;

import com.tictactec.ta.lib.Core;
import com.tictactec.ta.lib.MInteger;
import com.tictactec.ta.lib.RetCode;

public class TestCore {

	static Core core;

	@BeforeClass
	public static void BeforeClass() {
		core = new Core();

	}

	@Test
	public void testMinMaxIndexDouble() {
		double[] inputsinReal = new double[] { -3.74899758, 8.79802864,
				-0.14931231, -1.56997335, 8.905047, 2.43794917, -2.57177967,
				1.50790575, 6.28525889, -1.23445402, 9.88264006, -1.54691191,
				-1.51678414, -3.87081489, 4.07341677, -0.83149575, 6.45639026,
				-1.40668908, 8.34046177, 9.20368065, 1.97305676, 5.5028895,
				0.3892627, 6.70370615, 3.56699067, -2.57179387, 7.53523663,
				2.19858521, 5.48588226, 9.68097963, 7.19059048, 8.10866271,
				-4.529799, 6.25455656, -4.83669727, -1.99595817, 3.38484571,
				-1.7680024, 7.80204145, 6.92049361, 4.10760653, 5.48334737,
				2.01051649, -0.5360123, 6.4349846, -2.66170544, 1.19188141,
				7.91933993, -3.36841844, 2.38718663, 2.16506187, -0.2284759,
				9.99706536, -0.61847578, 9.21486081, -4.47503721, 3.76539438,
				9.18354848, 2.41393234, -4.37380726, 3.33243095, 9.37342345,
				2.10308501, 7.85515609, 1.46622299, -2.80063882, -2.75484542,
				-2.71461047, 7.27986801, 4.844885, 4.02320845, 3.95716224,
				8.23032752, 8.35721476, 2.20199541, 8.31864306, -1.95679191,
				5.96352889, 0.25646777, 5.35602973, 0.84101548, -0.48664477,
				3.94578672, 4.57081955, 8.89711142, 0.27538303, 8.15521628,
				-0.00423427, 2.04744304, 3.39087975, 6.80225727, -0.41025659,
				7.66486885, -3.10303327, -2.95132038, 6.28905328, -4.18467174,
				3.64449126, 4.01208808, 6.83494132 };

		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		int[] outMinIdx = new int[1];
		int[] outMaxIdx = new int[1];
		/*
		 * Odejmujemy -1 od nr indeksu, który wyszed³ w excelu, poniewa¿ tutaj
		 * tablica liczy siê od 0, a w excelu o 1
		 */
		int[] expectedMin = { 35 - 1 };
		int[] expectedMax = { 53 - 1 };

		RetCode rc = core.minMaxIndex(0, 99, inputsinReal, 100, outBegIdx,
				outNBElement, outMinIdx, outMaxIdx);

		assertArrayEquals(expectedMin, outMinIdx);
		assertArrayEquals(expectedMax, outMaxIdx);
	}

	@Test
	public void testMinMaxIndexFloat() {
		float[] inputsinReal = new float[] { 5.13f, 2.08f, -2.71f, 6.56f,
				5.29f, 3.3f, 6.33f, -2.52f, 1.5f, 4.83f, -2.37f, -2.86f,
				-1.33f, 5.55f, 6.81f, -2.75f, -3.6f, 0.57f, 9.07f, 5.01f,
				0.76f, 7.46f, -1.1f, -2.11f, -0.55f, 5.4f, -4.42f, 7.62f,
				3.73f, 7.23f, 2.79f, 4.63f, 3.53f, 1.42f, -4.22f, 9.9f, 9.76f,
				8.47f, 1.08f, 9f, 0.79f, -4.58f, -1.93f, 8.55f, 7.56f, 4.37f,
				-2.92f, -1.04f, -1.73f, 0.01f, 8.47f, -3.51f, 9.74f, 9.45f,
				2.59f, 6.46f, 5.27f, 5.96f, -3.67f, 3.11f, -3.55f, 9.95f,
				3.41f, 6.57f, 8.57f, 1.89f, 1.53f, 7.22f, 6.5f, 0.28f, 8.45f,
				1.02f, 1.42f, 4.39f, -1.57f, -1.12f, 4.79f, -3.62f, 3.77f,
				2.41f, 3.44f, 4.38f, 0.78f, 8.81f, 5.85f, -1.57f, -3.81f,
				4.59f, -0.53f, 1.86f, 3.76f, 2.6f, 0.59f, -3.23f, 6.78f, 3.97f,
				-0.25f, 3.9f, 1.13f, -0.86f };

		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		int[] outMinIdx = new int[1];
		int[] outMaxIdx = new int[1];
		/*
		 * Odejmujemy -1 od nr indeksu, który wyszed³ w excelu, poniewa¿ tutaj
		 * tablica liczy siê od 0, a w excelu o 1
		 */
		int[] expectedMin = { 42 - 1 };
		int[] expectedMax = { 62 - 1 };

		RetCode rc = core.minMaxIndex(0, 99, inputsinReal, 100, outBegIdx,
				outNBElement, outMinIdx, outMaxIdx);

		assertArrayEquals(expectedMin, outMinIdx);
		assertArrayEquals(expectedMax, outMaxIdx);
	}

	@Test
	public void testMinIndexDouble() {
		double[] inputsinReal = new double[] { -3.74899758, 8.79802864,
				-0.14931231, -1.56997335, 8.905047, 2.43794917, -2.57177967,
				1.50790575, 6.28525889, -1.23445402, 9.88264006, -1.54691191,
				-1.51678414, -3.87081489, 4.07341677, -0.83149575, 6.45639026,
				-1.40668908, 8.34046177, 9.20368065, 1.97305676, 5.5028895,
				0.3892627, 6.70370615, 3.56699067, -2.57179387, 7.53523663,
				2.19858521, 5.48588226, 9.68097963, 7.19059048, 8.10866271,
				-4.529799, 6.25455656, -4.83669727, -1.99595817, 3.38484571,
				-1.7680024, 7.80204145, 6.92049361, 4.10760653, 5.48334737,
				2.01051649, -0.5360123, 6.4349846, -2.66170544, 1.19188141,
				7.91933993, -3.36841844, 2.38718663, 2.16506187, -0.2284759,
				9.99706536, -0.61847578, 9.21486081, -4.47503721, 3.76539438,
				9.18354848, 2.41393234, -4.37380726, 3.33243095, 9.37342345,
				2.10308501, 7.85515609, 1.46622299, -2.80063882, -2.75484542,
				-2.71461047, 7.27986801, 4.844885, 4.02320845, 3.95716224,
				8.23032752, 8.35721476, 2.20199541, 8.31864306, -1.95679191,
				5.96352889, 0.25646777, 5.35602973, 0.84101548, -0.48664477,
				3.94578672, 4.57081955, 8.89711142, 0.27538303, 8.15521628,
				-0.00423427, 2.04744304, 3.39087975, 6.80225727, -0.41025659,
				7.66486885, -3.10303327, -2.95132038, 6.28905328, -4.18467174,
				3.64449126, 4.01208808, 6.83494132 };
		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		int[] outInteger = new int[1];
		int[] expectedMin = { 35 - 1 };

		RetCode rc = core.minIndex(0, 99, inputsinReal, 100, outBegIdx,
				outNBElement, outInteger);
		assertArrayEquals(expectedMin, outInteger);
	}

	@Test
	public void testMaxIndexDouble() {
		double[] inputsinReal = new double[] { -3.74899758, 8.79802864,
				-0.14931231, -1.56997335, 8.905047, 2.43794917, -2.57177967,
				1.50790575, 6.28525889, -1.23445402, 9.88264006, -1.54691191,
				-1.51678414, -3.87081489, 4.07341677, -0.83149575, 6.45639026,
				-1.40668908, 8.34046177, 9.20368065, 1.97305676, 5.5028895,
				0.3892627, 6.70370615, 3.56699067, -2.57179387, 7.53523663,
				2.19858521, 5.48588226, 9.68097963, 7.19059048, 8.10866271,
				-4.529799, 6.25455656, -4.83669727, -1.99595817, 3.38484571,
				-1.7680024, 7.80204145, 6.92049361, 4.10760653, 5.48334737,
				2.01051649, -0.5360123, 6.4349846, -2.66170544, 1.19188141,
				7.91933993, -3.36841844, 2.38718663, 2.16506187, -0.2284759,
				9.99706536, -0.61847578, 9.21486081, -4.47503721, 3.76539438,
				9.18354848, 2.41393234, -4.37380726, 3.33243095, 9.37342345,
				2.10308501, 7.85515609, 1.46622299, -2.80063882, -2.75484542,
				-2.71461047, 7.27986801, 4.844885, 4.02320845, 3.95716224,
				8.23032752, 8.35721476, 2.20199541, 8.31864306, -1.95679191,
				5.96352889, 0.25646777, 5.35602973, 0.84101548, -0.48664477,
				3.94578672, 4.57081955, 8.89711142, 0.27538303, 8.15521628,
				-0.00423427, 2.04744304, 3.39087975, 6.80225727, -0.41025659,
				7.66486885, -3.10303327, -2.95132038, 6.28905328, -4.18467174,
				3.64449126, 4.01208808, 6.83494132 };
		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		int[] outInteger = new int[1];
		int[] expectedMax = { 53 - 1 };

		RetCode rc = core.maxIndex(0, 99, inputsinReal, 100, outBegIdx,
				outNBElement, outInteger);
		assertArrayEquals(expectedMax, outInteger);
	}

	@Test
	public void testMinDouble() {
		double[] inputsinReal = new double[] { -3.74899758, 8.79802864,
				-0.14931231, -1.56997335, 8.905047, 2.43794917, -2.57177967,
				1.50790575, 6.28525889, -1.23445402, 9.88264006, -1.54691191,
				-1.51678414, -3.87081489, 4.07341677, -0.83149575, 6.45639026,
				-1.40668908, 8.34046177, 9.20368065, 1.97305676, 5.5028895,
				0.3892627, 6.70370615, 3.56699067, -2.57179387, 7.53523663,
				2.19858521, 5.48588226, 9.68097963, 7.19059048, 8.10866271,
				-4.529799, 6.25455656, -4.83669727, -1.99595817, 3.38484571,
				-1.7680024, 7.80204145, 6.92049361, 4.10760653, 5.48334737,
				2.01051649, -0.5360123, 6.4349846, -2.66170544, 1.19188141,
				7.91933993, -3.36841844, 2.38718663, 2.16506187, -0.2284759,
				9.99706536, -0.61847578, 9.21486081, -4.47503721, 3.76539438,
				9.18354848, 2.41393234, -4.37380726, 3.33243095, 9.37342345,
				2.10308501, 7.85515609, 1.46622299, -2.80063882, -2.75484542,
				-2.71461047, 7.27986801, 4.844885, 4.02320845, 3.95716224,
				8.23032752, 8.35721476, 2.20199541, 8.31864306, -1.95679191,
				5.96352889, 0.25646777, 5.35602973, 0.84101548, -0.48664477,
				3.94578672, 4.57081955, 8.89711142, 0.27538303, 8.15521628,
				-0.00423427, 2.04744304, 3.39087975, 6.80225727, -0.41025659,
				7.66486885, -3.10303327, -2.95132038, 6.28905328, -4.18467174,
				3.64449126, 4.01208808, 6.83494132 };
		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		double[] outDouble = new double[1];
		double[] expectedMin = { -4.83669727 };

		RetCode rc = core.min(0, 99, inputsinReal, 100, outBegIdx,
				outNBElement, outDouble);
		assertArrayEquals(expectedMin, outDouble, 0);
	}

	@Test
	public void testMaxDouble() {
		double[] inputsinReal = new double[] { -3.74899758, 8.79802864,
				-0.14931231, -1.56997335, 8.905047, 2.43794917, -2.57177967,
				1.50790575, 6.28525889, -1.23445402, 9.88264006, -1.54691191,
				-1.51678414, -3.87081489, 4.07341677, -0.83149575, 6.45639026,
				-1.40668908, 8.34046177, 9.20368065, 1.97305676, 5.5028895,
				0.3892627, 6.70370615, 3.56699067, -2.57179387, 7.53523663,
				2.19858521, 5.48588226, 9.68097963, 7.19059048, 8.10866271,
				-4.529799, 6.25455656, -4.83669727, -1.99595817, 3.38484571,
				-1.7680024, 7.80204145, 6.92049361, 4.10760653, 5.48334737,
				2.01051649, -0.5360123, 6.4349846, -2.66170544, 1.19188141,
				7.91933993, -3.36841844, 2.38718663, 2.16506187, -0.2284759,
				9.99706536, -0.61847578, 9.21486081, -4.47503721, 3.76539438,
				9.18354848, 2.41393234, -4.37380726, 3.33243095, 9.37342345,
				2.10308501, 7.85515609, 1.46622299, -2.80063882, -2.75484542,
				-2.71461047, 7.27986801, 4.844885, 4.02320845, 3.95716224,
				8.23032752, 8.35721476, 2.20199541, 8.31864306, -1.95679191,
				5.96352889, 0.25646777, 5.35602973, 0.84101548, -0.48664477,
				3.94578672, 4.57081955, 8.89711142, 0.27538303, 8.15521628,
				-0.00423427, 2.04744304, 3.39087975, 6.80225727, -0.41025659,
				7.66486885, -3.10303327, -2.95132038, 6.28905328, -4.18467174,
				3.64449126, 4.01208808, 6.83494132 };
		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		double[] outDouble = new double[1];
		double[] expectedMax = { 9.99706536 };

		RetCode rc = core.max(0, 99, inputsinReal, 100, outBegIdx,
				outNBElement, outDouble);
		assertArrayEquals(expectedMax, outDouble, 0);
	}

	@Test
	public void testMinIndexFloat() {
		float[] inputsinReal = new float[] { 5.13f, 2.08f, -2.71f, 6.56f,
				5.29f, 3.3f, 6.33f, -2.52f, 1.5f, 4.83f, -2.37f, -2.86f,
				-1.33f, 5.55f, 6.81f, -2.75f, -3.6f, 0.57f, 9.07f, 5.01f,
				0.76f, 7.46f, -1.1f, -2.11f, -0.55f, 5.4f, -4.42f, 7.62f,
				3.73f, 7.23f, 2.79f, 4.63f, 3.53f, 1.42f, -4.22f, 9.9f, 9.76f,
				8.47f, 1.08f, 9f, 0.79f, -4.58f, -1.93f, 8.55f, 7.56f, 4.37f,
				-2.92f, -1.04f, -1.73f, 0.01f, 8.47f, -3.51f, 9.74f, 9.45f,
				2.59f, 6.46f, 5.27f, 5.96f, -3.67f, 3.11f, -3.55f, 9.95f,
				3.41f, 6.57f, 8.57f, 1.89f, 1.53f, 7.22f, 6.5f, 0.28f, 8.45f,
				1.02f, 1.42f, 4.39f, -1.57f, -1.12f, 4.79f, -3.62f, 3.77f,
				2.41f, 3.44f, 4.38f, 0.78f, 8.81f, 5.85f, -1.57f, -3.81f,
				4.59f, -0.53f, 1.86f, 3.76f, 2.6f, 0.59f, -3.23f, 6.78f, 3.97f,
				-0.25f, 3.9f, 1.13f, -0.86f };
		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		int[] outInteger = new int[1];
		int[] expectedMin = { 42 - 1 };

		RetCode rc = core.minIndex(0, 99, inputsinReal, 100, outBegIdx,
				outNBElement, outInteger);
		assertArrayEquals(expectedMin, outInteger);
	}

	@Test
	public void testMaxIndexFloat() {
		float[] inputsinReal = new float[] { 5.13f, 2.08f, -2.71f, 6.56f,
				5.29f, 3.3f, 6.33f, -2.52f, 1.5f, 4.83f, -2.37f, -2.86f,
				-1.33f, 5.55f, 6.81f, -2.75f, -3.6f, 0.57f, 9.07f, 5.01f,
				0.76f, 7.46f, -1.1f, -2.11f, -0.55f, 5.4f, -4.42f, 7.62f,
				3.73f, 7.23f, 2.79f, 4.63f, 3.53f, 1.42f, -4.22f, 9.9f, 9.76f,
				8.47f, 1.08f, 9f, 0.79f, -4.58f, -1.93f, 8.55f, 7.56f, 4.37f,
				-2.92f, -1.04f, -1.73f, 0.01f, 8.47f, -3.51f, 9.74f, 9.45f,
				2.59f, 6.46f, 5.27f, 5.96f, -3.67f, 3.11f, -3.55f, 9.95f,
				3.41f, 6.57f, 8.57f, 1.89f, 1.53f, 7.22f, 6.5f, 0.28f, 8.45f,
				1.02f, 1.42f, 4.39f, -1.57f, -1.12f, 4.79f, -3.62f, 3.77f,
				2.41f, 3.44f, 4.38f, 0.78f, 8.81f, 5.85f, -1.57f, -3.81f,
				4.59f, -0.53f, 1.86f, 3.76f, 2.6f, 0.59f, -3.23f, 6.78f, 3.97f,
				-0.25f, 3.9f, 1.13f, -0.86f };
		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		int[] outInteger = new int[1];
		int[] expectedMin = { 62 - 1 };

		RetCode rc = core.maxIndex(0, 99, inputsinReal, 100, outBegIdx,
				outNBElement, outInteger);
		assertArrayEquals(expectedMin, outInteger);
	}

	@Test
	public void testMinFloat() {
		float[] inputsinReal = new float[] { 5.13f, 2.08f, -2.71f, 6.56f,
				5.29f, 3.3f, 6.33f, -2.52f, 1.5f, 4.83f, -2.37f, -2.86f,
				-1.33f, 5.55f, 6.81f, -2.75f, -3.6f, 0.57f, 9.07f, 5.01f,
				0.76f, 7.46f, -1.1f, -2.11f, -0.55f, 5.4f, -4.42f, 7.62f,
				3.73f, 7.23f, 2.79f, 4.63f, 3.53f, 1.42f, -4.22f, 9.9f, 9.76f,
				8.47f, 1.08f, 9f, 0.79f, -4.58f, -1.93f, 8.55f, 7.56f, 4.37f,
				-2.92f, -1.04f, -1.73f, 0.01f, 8.47f, -3.51f, 9.74f, 9.45f,
				2.59f, 6.46f, 5.27f, 5.96f, -3.67f, 3.11f, -3.55f, 9.95f,
				3.41f, 6.57f, 8.57f, 1.89f, 1.53f, 7.22f, 6.5f, 0.28f, 8.45f,
				1.02f, 1.42f, 4.39f, -1.57f, -1.12f, 4.79f, -3.62f, 3.77f,
				2.41f, 3.44f, 4.38f, 0.78f, 8.81f, 5.85f, -1.57f, -3.81f,
				4.59f, -0.53f, 1.86f, 3.76f, 2.6f, 0.59f, -3.23f, 6.78f, 3.97f,
				-0.25f, 3.9f, 1.13f, -0.86f };
		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		double[] outDouble = new double[1];
		double[] expectedMin = { -4.58f };

		RetCode rc = core.min(0, 99, inputsinReal, 100, outBegIdx,
				outNBElement, outDouble);
		assertArrayEquals(expectedMin, outDouble, 0);
	}

	@Test
	public void testMaxFloat() {
		float[] inputsinReal = new float[] { 5.13f, 2.08f, -2.71f, 6.56f,
				5.29f, 3.3f, 6.33f, -2.52f, 1.5f, 4.83f, -2.37f, -2.86f,
				-1.33f, 5.55f, 6.81f, -2.75f, -3.6f, 0.57f, 9.07f, 5.01f,
				0.76f, 7.46f, -1.1f, -2.11f, -0.55f, 5.4f, -4.42f, 7.62f,
				3.73f, 7.23f, 2.79f, 4.63f, 3.53f, 1.42f, -4.22f, 9.9f, 9.76f,
				8.47f, 1.08f, 9f, 0.79f, -4.58f, -1.93f, 8.55f, 7.56f, 4.37f,
				-2.92f, -1.04f, -1.73f, 0.01f, 8.47f, -3.51f, 9.74f, 9.45f,
				2.59f, 6.46f, 5.27f, 5.96f, -3.67f, 3.11f, -3.55f, 9.95f,
				3.41f, 6.57f, 8.57f, 1.89f, 1.53f, 7.22f, 6.5f, 0.28f, 8.45f,
				1.02f, 1.42f, 4.39f, -1.57f, -1.12f, 4.79f, -3.62f, 3.77f,
				2.41f, 3.44f, 4.38f, 0.78f, 8.81f, 5.85f, -1.57f, -3.81f,
				4.59f, -0.53f, 1.86f, 3.76f, 2.6f, 0.59f, -3.23f, 6.78f, 3.97f,
				-0.25f, 3.9f, 1.13f, -0.86f };
		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		double[] outDouble = new double[1];
		double[] expectedMax = { 9.95f };

		RetCode rc = core.max(0, 99, inputsinReal, 100, outBegIdx,
				outNBElement, outDouble);

		assertArrayEquals(expectedMax, outDouble, 0);
	}

	@Test
	public void wmaFloat() {
		float[] inputsinReal = new float[] { 5.13f, 2.08f, -2.71f, 6.56f,
				5.29f, 3.3f, 6.33f, -2.52f, 1.5f, 4.83f, -2.37f, -2.86f,
				-1.33f, 5.55f, 6.81f, -2.75f, -3.6f, 0.57f, 9.07f, 5.01f,
				0.76f, 7.46f, -1.1f, -2.11f, -0.55f, 5.4f, -4.42f, 7.62f,
				3.73f, 7.23f, 2.79f, 4.63f, 3.53f, 1.42f, -4.22f, 9.9f, 9.76f,
				8.47f, 1.08f, 9f, 0.79f, -4.58f, -1.93f, 8.55f, 7.56f, 4.37f,
				-2.92f, -1.04f, -1.73f, 0.01f, 8.47f, -3.51f, 9.74f, 9.45f,
				2.59f, 6.46f, 5.27f, 5.96f, -3.67f, 3.11f, -3.55f, 9.95f,
				3.41f, 6.57f, 8.57f, 1.89f, 1.53f, 7.22f, 6.5f, 0.28f, 8.45f,
				1.02f, 1.42f, 4.39f, -1.57f, -1.12f, 4.79f, -3.62f, 3.77f,
				2.41f, 3.44f, 4.38f, 0.78f, 8.81f, 5.85f, -1.57f, -3.81f,
				4.59f, -0.53f, 1.86f, 3.76f, 2.6f, 0.59f, -3.23f, 6.78f, 3.97f,
				-0.25f, 3.9f, 1.13f, -0.86f };
		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		double[] outReal = new double[1];
		// double[] expectedWma = { 2,68833861386139 };
		// double[] expectedWma = { 2.688338613861387f };

		RetCode rc = core.wma(0, 99, inputsinReal, 100, outBegIdx,
				outNBElement, outReal);
		double[] val2 = new double[1];
		val2[0] = 2.688338613861387;
		val2[0] *= 100;
		val2[0] = Math.round(val2[0]);
		val2[0] /= 10000;
		double[] val = new double[1];
		val[0] = outReal[0];
		val[0] *= 100;
		val[0] = Math.round(val[0]);
		val[0] /= 10000;
		assertArrayEquals(val2, val, 0);
	}

	@Test
	public void wmaDouble() {
		double[] inputsinReal = new double[] { -3.74899758, 8.79802864,
				-0.14931231, -1.56997335, 8.905047, 2.43794917, -2.57177967,
				1.50790575, 6.28525889, -1.23445402, 9.88264006, -1.54691191,
				-1.51678414, -3.87081489, 4.07341677, -0.83149575, 6.45639026,
				-1.40668908, 8.34046177, 9.20368065, 1.97305676, 5.5028895,
				0.3892627, 6.70370615, 3.56699067, -2.57179387, 7.53523663,
				2.19858521, 5.48588226, 9.68097963, 7.19059048, 8.10866271,
				-4.529799, 6.25455656, -4.83669727, -1.99595817, 3.38484571,
				-1.7680024, 7.80204145, 6.92049361, 4.10760653, 5.48334737,
				2.01051649, -0.5360123, 6.4349846, -2.66170544, 1.19188141,
				7.91933993, -3.36841844, 2.38718663, 2.16506187, -0.2284759,
				9.99706536, -0.61847578, 9.21486081, -4.47503721, 3.76539438,
				9.18354848, 2.41393234, -4.37380726, 3.33243095, 9.37342345,
				2.10308501, 7.85515609, 1.46622299, -2.80063882, -2.75484542,
				-2.71461047, 7.27986801, 4.844885, 4.02320845, 3.95716224,
				8.23032752, 8.35721476, 2.20199541, 8.31864306, -1.95679191,
				5.96352889, 0.25646777, 5.35602973, 0.84101548, -0.48664477,
				3.94578672, 4.57081955, 8.89711142, 0.27538303, 8.15521628,
				-0.00423427, 2.04744304, 3.39087975, 6.80225727, -0.41025659,
				7.66486885, -3.10303327, -2.95132038, 6.28905328, -4.18467174,
				3.64449126, 4.01208808, 6.83494132 };
		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		double[] outReal = new double[1];
		// double[] expectedWma = { 2,68833861386139 };
		// double[] expectedWma = { 3.036157028362376 };

		RetCode rc = core.wma(0, 99, inputsinReal, 100, outBegIdx,
				outNBElement, outReal);
		double[] val2 = new double[1];
		val2[0] = 3.036157028362376;
		val2[0] *= 100;
		val2[0] = Math.round(val2[0]);
		val2[0] /= 10000;
		double[] val = new double[1];
		val[0] = outReal[0];
		val[0] *= 100;
		val[0] = Math.round(val[0]);
		val[0] /= 10000;
		assertArrayEquals(val2, val, 0);
	}

	/*
	 * @Test public void linearReg() { double[] inputsinReal = new double[] {
	 * -3.74899758, 8.79802864, -0.14931231, -1.56997335, 8.905047, 2.43794917,
	 * -2.57177967, 1.50790575, 6.28525889, -1.23445402, 9.88264006,
	 * -1.54691191, -1.51678414, -3.87081489, 4.07341677, -0.83149575,
	 * 6.45639026, -1.40668908, 8.34046177, 9.20368065, 1.97305676, 5.5028895,
	 * 0.3892627, 6.70370615, 3.56699067, -2.57179387, 7.53523663, 2.19858521,
	 * 5.48588226, 9.68097963, 7.19059048, 8.10866271, -4.529799, 6.25455656,
	 * -4.83669727, -1.99595817, 3.38484571, -1.7680024, 7.80204145, 6.92049361,
	 * 4.10760653, 5.48334737, 2.01051649, -0.5360123, 6.4349846, -2.66170544,
	 * 1.19188141, 7.91933993, -3.36841844, 2.38718663, 2.16506187, -0.2284759,
	 * 9.99706536, -0.61847578, 9.21486081, -4.47503721, 3.76539438, 9.18354848,
	 * 2.41393234, -4.37380726, 3.33243095, 9.37342345, 2.10308501, 7.85515609,
	 * 1.46622299, -2.80063882, -2.75484542, -2.71461047, 7.27986801, 4.844885,
	 * 4.02320845, 3.95716224, 8.23032752, 8.35721476, 2.20199541, 8.31864306,
	 * -1.95679191, 5.96352889, 0.25646777, 5.35602973, 0.84101548, -0.48664477,
	 * 3.94578672, 4.57081955, 8.89711142, 0.27538303, 8.15521628, -0.00423427,
	 * 2.04744304, 3.39087975, 6.80225727, -0.41025659, 7.66486885, -3.10303327,
	 * -2.95132038, 6.28905328, -4.18467174, 3.64449126, 4.01208808, 6.83494132
	 * }; MInteger outBegIdx = new MInteger(); MInteger outNBElement = new
	 * MInteger(); double[] outReal = new double[100]; //double[] expectedWma =
	 * { 2,68833861386139 }; //double[] expectedWma = { -0.00174917491749175 };
	 * 
	 * 
	 * RetCode rc = core.linearReg(0, 99, inputsinReal, 100, outBegIdx,
	 * outNBElement, outReal); //System.out.println(outReal[i]);
	 * 
	 * 
	 * double[] val2 = new double[1]; val2[0] = -0.00174917491749175; val2[0] *=
	 * 100; val2[0] = Math.round(val2[0]); val2[0] /= 10000; double[] val = new
	 * double[1]; val[0] = outReal[6]; val[0] *= 100; val[0] =
	 * Math.round(val[0]); val[0] /= 10000; for(int i=0;i<100;i++){
	 * System.out.println(outReal[i]); } assertArrayEquals(val2, val, 0);
	 * 
	 * }
	 */
	/*
	 * @Test public void linearReg() { double[] inputsinReal = new double[] {
	 * -3.74899758, 8.79802864, -0.14931231, -1.56997335, 8.905047, 2.43794917,
	 * -2.57177967, 1.50790575, 6.28525889, -1.23445402, 9.88264006,
	 * -1.54691191, -1.51678414, -3.87081489, 4.07341677, -0.83149575,
	 * 6.45639026, -1.40668908, 8.34046177, 9.20368065, 1.97305676, 5.5028895,
	 * 0.3892627, 6.70370615, 3.56699067, -2.57179387, 7.53523663, 2.19858521,
	 * 5.48588226, 9.68097963, 7.19059048, 8.10866271, -4.529799, 6.25455656,
	 * -4.83669727, -1.99595817, 3.38484571, -1.7680024, 7.80204145, 6.92049361,
	 * 4.10760653, 5.48334737, 2.01051649, -0.5360123, 6.4349846, -2.66170544,
	 * 1.19188141, 7.91933993, -3.36841844, 2.38718663, 2.16506187, -0.2284759,
	 * 9.99706536, -0.61847578, 9.21486081, -4.47503721, 3.76539438, 9.18354848,
	 * 2.41393234, -4.37380726, 3.33243095, 9.37342345, 2.10308501, 7.85515609,
	 * 1.46622299, -2.80063882, -2.75484542, -2.71461047, 7.27986801, 4.844885,
	 * 4.02320845, 3.95716224, 8.23032752, 8.35721476, 2.20199541, 8.31864306,
	 * -1.95679191, 5.96352889, 0.25646777, 5.35602973, 0.84101548, -0.48664477,
	 * 3.94578672, 4.57081955, 8.89711142, 0.27538303, 8.15521628, -0.00423427,
	 * 2.04744304, 3.39087975, 6.80225727, -0.41025659, 7.66486885, -3.10303327,
	 * -2.95132038, 6.28905328, -4.18467174, 3.64449126, 4.01208808, 6.83494132
	 * }; MInteger outBegIdx = new MInteger(); MInteger outNBElement = new
	 * MInteger(); double[] outReal = new double[100]; //double[] expectedWma =
	 * { 2,68833861386139 }; //double[] expectedWma = { -0.00174917491749175 };
	 * 
	 * 
	 * RetCode rc = core.tsf(0, 99, inputsinReal, 100, outBegIdx, outNBElement,
	 * outReal); //System.out.println(outReal[i]);
	 * 
	 * 
	 * double[] val2 = new double[1]; val2[0] = 2.6265458688495; val2[0] *= 100;
	 * val2[0] = Math.round(val2[0]); val2[0] /= 10000; double[] val = new
	 * double[1]; val[0] = outReal[0]; val[0] *= 100; val[0] =
	 * Math.round(val[0]); val[0] /= 10000; assertArrayEquals(val2, val, 0);
	 * 
	 * }
	 */
	@Test
	public void stdDevDouble() {
		double[] inputsinReal = new double[] { -3.74899758, 8.79802864,
				-0.14931231, -1.56997335, 8.905047, 2.43794917, -2.57177967,
				1.50790575, 6.28525889, -1.23445402, 9.88264006, -1.54691191,
				-1.51678414, -3.87081489, 4.07341677, -0.83149575, 6.45639026,
				-1.40668908, 8.34046177, 9.20368065, 1.97305676, 5.5028895,
				0.3892627, 6.70370615, 3.56699067, -2.57179387, 7.53523663,
				2.19858521, 5.48588226, 9.68097963, 7.19059048, 8.10866271,
				-4.529799, 6.25455656, -4.83669727, -1.99595817, 3.38484571,
				-1.7680024, 7.80204145, 6.92049361, 4.10760653, 5.48334737,
				2.01051649, -0.5360123, 6.4349846, -2.66170544, 1.19188141,
				7.91933993, -3.36841844, 2.38718663, 2.16506187, -0.2284759,
				9.99706536, -0.61847578, 9.21486081, -4.47503721, 3.76539438,
				9.18354848, 2.41393234, -4.37380726, 3.33243095, 9.37342345,
				2.10308501, 7.85515609, 1.46622299, -2.80063882, -2.75484542,
				-2.71461047, 7.27986801, 4.844885, 4.02320845, 3.95716224,
				8.23032752, 8.35721476, 2.20199541, 8.31864306, -1.95679191,
				5.96352889, 0.25646777, 5.35602973, 0.84101548, -0.48664477,
				3.94578672, 4.57081955, 8.89711142, 0.27538303, 8.15521628,
				-0.00423427, 2.04744304, 3.39087975, 6.80225727, -0.41025659,
				7.66486885, -3.10303327, -2.95132038, 6.28905328, -4.18467174,
				3.64449126, 4.01208808, 6.83494132 };
		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		double[] outReal = new double[1];
		double optInNbDev = 1;
		double[] expectedWma = { 4.313824434190533 };

		RetCode rc = core.stdDev(0, 99, inputsinReal, 100, optInNbDev,
				outBegIdx, outNBElement, outReal);
		double[] val2 = new double[1];
		val2[0] = 4.31382443419053300;
		val2[0] *= 100;
		val2[0] = Math.round(val2[0]);
		val2[0] /= 10000;
		double[] val = new double[1];
		val[0] = outReal[0];
		val[0] *= 100;
		val[0] = Math.round(val[0]);
		val[0] /= 10000;
		assertArrayEquals(val2, val, 0);

	}

	@Test
	public void stdDevFloat() {
		float[] inputsinReal = new float[] { 5.13f, 2.08f, -2.71f, 6.56f,
				5.29f, 3.3f, 6.33f, -2.52f, 1.5f, 4.83f, -2.37f, -2.86f,
				-1.33f, 5.55f, 6.81f, -2.75f, -3.6f, 0.57f, 9.07f, 5.01f,
				0.76f, 7.46f, -1.1f, -2.11f, -0.55f, 5.4f, -4.42f, 7.62f,
				3.73f, 7.23f, 2.79f, 4.63f, 3.53f, 1.42f, -4.22f, 9.9f, 9.76f,
				8.47f, 1.08f, 9f, 0.79f, -4.58f, -1.93f, 8.55f, 7.56f, 4.37f,
				-2.92f, -1.04f, -1.73f, 0.01f, 8.47f, -3.51f, 9.74f, 9.45f,
				2.59f, 6.46f, 5.27f, 5.96f, -3.67f, 3.11f, -3.55f, 9.95f,
				3.41f, 6.57f, 8.57f, 1.89f, 1.53f, 7.22f, 6.5f, 0.28f, 8.45f,
				1.02f, 1.42f, 4.39f, -1.57f, -1.12f, 4.79f, -3.62f, 3.77f,
				2.41f, 3.44f, 4.38f, 0.78f, 8.81f, 5.85f, -1.57f, -3.81f,
				4.59f, -0.53f, 1.86f, 3.76f, 2.6f, 0.59f, -3.23f, 6.78f, 3.97f,
				-0.25f, 3.9f, 1.13f, -0.86f };
		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		double[] outReal = new double[1];
		double optInNbDev = 1;
		double[] expectedWma = { 4.12119426380267 };

		RetCode rc = core.stdDev(0, 99, inputsinReal, 100, optInNbDev,
				outBegIdx, outNBElement, outReal);
		double[] val2 = new double[1];
		val2[0] = 4.12119426380267;
		val2[0] *= 100;
		val2[0] = Math.round(val2[0]);
		val2[0] /= 10000;
		double[] val = new double[1];
		val[0] = outReal[0];
		val[0] *= 100;
		val[0] = Math.round(val[0]);
		val[0] /= 10000;
		assertArrayEquals(val2, val, 0);

	}

	/*@Test
	public void stdMidPrice() {
		float[] inLow = new float[] { -5.09f, -9.84f, -5.55f, -5.83f, -7.64f,
				-1.83f, -5.19f, -8.25f, -9.74f, 0.02f, -3.56f, -9.69f, -2.42f,
				-3f, -9.15f, -9.34f, -3.36f, -0.06f, -2.7f, -2.05f, -8.27f,
				-8.34f, -0.32f, 0.17f, -0.91f, -9.15f, -2.37f, -6.51f, -2.92f,
				-4.48f, -9.79f, -3.45f, -9.44f, -6.36f, -5.65f, -3.2f, -7.8f,
				-6.45f, 0.22f, -9.04f, -6.25f, -9.8f, 0.28f, -5.75f, 0.8f,
				-4.8f, -9.18f, -0.37f, -3.33f, -1.5f, -9.92f, -9.73f, 0.51f,
				0.85f, -4.49f, -7.44f, -0.1f, -4.36f, -9.49f, -0.68f, -7.77f,
				-2.56f, -6.89f, -8.51f, -6.7f, -3.18f, 0.72f, -6.76f, -0.05f,
				-2.12f, 0.11f, -1.87f, -6.77f, -1.89f, -4.74f, -9.45f, -9.55f,
				-0.67f, 0.78f, -3.2f, -5.9f, -3.84f, -8.64f, -7.13f, -8.92f,
				-0.65f, -4.8f, -7.11f, -6.64f, -2.13f, -8.94f, -9.38f, -8.29f,
				-1.48f, -8.76f, -6.29f, -4.56f, -5.33f, -8.45f, -0.81f };
		float[] inHigh = new float[] { 5.38f, 8.95f, 5.77f, 3.85f, 4.25f,
				3.35f, 5.67f, 6.37f, 4.31f, 9.72f, 7.32f, 8.95f, 2.32f, 8.03f,
				7.14f, 5.27f, 5.36f, 6.75f, 5.83f, 5.59f, 1.12f, 8.08f, 2.11f,
				8.89f, 3.03f, 2.04f, 1.96f, 3.29f, 2.9f, 2.82f, 8.63f, 1.86f,
				9f, 9.98f, 6.86f, 8.05f, 6.45f, 6.4f, 9.56f, 6.23f, 8.14f,
				5.6f, 5.9f, 5.9f, 1.05f, 6.77f, 7.23f, 4.97f, 8.01f, 5.31f,
				9.72f, 9.65f, 1.76f, 4.97f, 8.85f, 5.94f, 9.83f, 1.7f, 9.54f,
				4.4f, 3.07f, 6.39f, 5.3f, 7.76f, 5.37f, 7.14f, 7.23f, 8.99f,
				5.72f, 5.33f, 8.83f, 1.19f, 9.41f, 8.92f, 4.36f, 8.62f, 6.57f,
				1.57f, 2.73f, 3.49f, 3.94f, 7.1f, 8.68f, 1.03f, 9.89f, 3.01f,
				9.58f, 6.56f, 8.44f, 6.2f, 5.78f, 4.68f, 9.32f, 1.64f, 9.88f,
				5.48f, 4.31f, 8.62f, 6.2f, 3.27f };
		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		double[] outReal = new double[1];
		double optInNbDev = 1;
		double[] expectedMidPrice = { 4.12119426380267 };

		RetCode rc = core.midPrice(0, 99, inHigh, inLow, 100, outBegIdx,
				outNBElement, outReal);
		assertArrayEquals(expectedMidPrice, outReal, 0);

	}*/

	@Test
	public void sumFloat() {
		float[] inReal = new float[] { 5.13f, 2.08f, -2.71f, 6.56f, 5.29f,
				3.3f, 6.33f, -2.52f, 1.5f, 4.83f, -2.37f, -2.86f, -1.33f,
				5.55f, 6.81f, -2.75f, -3.6f, 0.57f, 9.07f, 5.01f, 0.76f, 7.46f,
				-1.1f, -2.11f, -0.55f, 5.4f, -4.42f, 7.62f, 3.73f, 7.23f,
				2.79f, 4.63f, 3.53f, 1.42f, -4.22f, 9.9f, 9.76f, 8.47f, 1.08f,
				9f, 0.79f, -4.58f, -1.93f, 8.55f, 7.56f, 4.37f, -2.92f, -1.04f,
				-1.73f, 0.01f, 8.47f, -3.51f, 9.74f, 9.45f, 2.59f, 6.46f,
				5.27f, 5.96f, -3.67f, 3.11f, -3.55f, 9.95f, 3.41f, 6.57f,
				8.57f, 1.89f, 1.53f, 7.22f, 6.5f, 0.28f, 8.45f, 1.02f, 1.42f,
				4.39f, -1.57f, -1.12f, 4.79f, -3.62f, 3.77f, 2.41f, 3.44f,
				4.38f, 0.78f, 8.81f, 5.85f, -1.57f, -3.81f, 4.59f, -0.53f,
				1.86f, 3.76f, 2.6f, 0.59f, -3.23f, 6.78f, 3.97f, -0.25f, 3.9f,
				1.13f, -0.86f };

		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		double[] outReal = new double[1];

		RetCode rc = core.sum(0, 99, inReal, 100, outBegIdx, outNBElement,
				outReal);
		double[] val2 = new double[1];
		val2[0] = 271.72;
		val2[0] *= 100;
		val2[0] = Math.round(val2[0]);
		val2[0] /= 100;
		double[] val = new double[1];
		val[0] = outReal[0];
		val[0] *= 100;
		val[0] = Math.round(val[0]);
		val[0] /= 100;
		assertArrayEquals(val2, val, 0);

	}

	@Test
	public void sumDouble() {
		double[] inputsinReal = new double[] { -3.74899758, 8.79802864,
				-0.14931231, -1.56997335, 8.905047, 2.43794917, -2.57177967,
				1.50790575, 6.28525889, -1.23445402, 9.88264006, -1.54691191,
				-1.51678414, -3.87081489, 4.07341677, -0.83149575, 6.45639026,
				-1.40668908, 8.34046177, 9.20368065, 1.97305676, 5.5028895,
				0.3892627, 6.70370615, 3.56699067, -2.57179387, 7.53523663,
				2.19858521, 5.48588226, 9.68097963, 7.19059048, 8.10866271,
				-4.529799, 6.25455656, -4.83669727, -1.99595817, 3.38484571,
				-1.7680024, 7.80204145, 6.92049361, 4.10760653, 5.48334737,
				2.01051649, -0.5360123, 6.4349846, -2.66170544, 1.19188141,
				7.91933993, -3.36841844, 2.38718663, 2.16506187, -0.2284759,
				9.99706536, -0.61847578, 9.21486081, -4.47503721, 3.76539438,
				9.18354848, 2.41393234, -4.37380726, 3.33243095, 9.37342345,
				2.10308501, 7.85515609, 1.46622299, -2.80063882, -2.75484542,
				-2.71461047, 7.27986801, 4.844885, 4.02320845, 3.95716224,
				8.23032752, 8.35721476, 2.20199541, 8.31864306, -1.95679191,
				5.96352889, 0.25646777, 5.35602973, 0.84101548, -0.48664477,
				3.94578672, 4.57081955, 8.89711142, 0.27538303, 8.15521628,
				-0.00423427, 2.04744304, 3.39087975, 6.80225727, -0.41025659,
				7.66486885, -3.10303327, -2.95132038, 6.28905328, -4.18467174,
				3.64449126, 4.01208808, 6.83494132 };

		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		double[] outReal = new double[1];

		RetCode rc = core.sum(0, 99, inputsinReal, 100, outBegIdx,
				outNBElement, outReal);
		double[] val2 = new double[1];
		val2[0] = 293.37584647;
		val2[0] *= 100;
		val2[0] = Math.round(val2[0]);
		val2[0] /= 100;
		double[] val = new double[1];
		val[0] = outReal[0];
		val[0] *= 100;
		val[0] = Math.round(val[0]);
		val[0] /= 100;
		assertArrayEquals(val2, val, 0);

	}

	@Test
	public void rocDouble() {
		double[] inputsinReal = new double[] { -3.74899758, 8.79802864,
				-0.14931231, -1.56997335, 8.905047, 2.43794917, -2.57177967,
				1.50790575, 6.28525889, -1.23445402, 9.88264006, -1.54691191,
				-1.51678414, -3.87081489, 4.07341677, -0.83149575, 6.45639026,
				-1.40668908, 8.34046177, 9.20368065, 1.97305676, 5.5028895,
				0.3892627, 6.70370615, 3.56699067, -2.57179387, 7.53523663,
				2.19858521, 5.48588226, 9.68097963, 7.19059048, 8.10866271,
				-4.529799, 6.25455656, -4.83669727, -1.99595817, 3.38484571,
				-1.7680024, 7.80204145, 6.92049361, 4.10760653, 5.48334737,
				2.01051649, -0.5360123, 6.4349846, -2.66170544, 1.19188141,
				7.91933993, -3.36841844, 2.38718663, 2.16506187, -0.2284759,
				9.99706536, -0.61847578, 9.21486081, -4.47503721, 3.76539438,
				9.18354848, 2.41393234, -4.37380726, 3.33243095, 9.37342345,
				2.10308501, 7.85515609, 1.46622299, -2.80063882, -2.75484542,
				-2.71461047, 7.27986801, 4.844885, 4.02320845, 3.95716224,
				8.23032752, 8.35721476, 2.20199541, 8.31864306, -1.95679191,
				5.96352889, 0.25646777, 5.35602973, 0.84101548, -0.48664477,
				3.94578672, 4.57081955, 8.89711142, 0.27538303, 8.15521628,
				-0.00423427, 2.04744304, 3.39087975, 6.80225727, -0.41025659,
				7.66486885, -3.10303327, -2.95132038, 6.28905328, -4.18467174,
				3.64449126, 4.01208808, 6.83494132 };
		double[] expectedRoc = new double[] { -59.45, -230.29, -342.07, -19.36,
				-37.62, 91.82, -139.81, -159.52, 222.00, -149.07, 20.68,
				-53.50, -517.29, 22.70, -140.38, 30.91, -115.83, 1491.23,
				-44.76, -84.83, 881.58, -114.75, 91.82, -73.93, -1081.82,
				-181.85, -272.40, -51.05, 93.83, -61.41, 65.95, -23.76, -59.77,
				-397.18, -334.60, -1.41, -13.22, -87.25, 733.33, -91.22,
				-679.75, -57.86, -543.01, -11.58, -42.20, -166.82, -64.38,
				66.35, -100.58, 84600.00, -141.44, -377.49, -2.98, -72.59,
				149.42, -18.42, 13.09, -161.58, -184.74, -214.15, -380.28,
				-65.73, 92.67, 30.44, -77.95, -19.05, 371.90, -9.97, -95.69,
				2917.86, -87.93, 39.22, 209.15, -135.76, -28.66, -527.68,
				-175.57, -204.14, -36.07, 42.74, 27.33, -82.19, 1029.49,
				-33.60, -126.84, 142.68, -220.47, -111.55, -450.94, 102.15,
				-30.85, -77.31, -647.46, -309.91, -41.45, -106.30, -1660.00,
				-71.03, -176.11, -100.00};

		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		double[] outReal = new double[100];

		RetCode rc = core.roc(0, 99, inputsinReal, 100, outBegIdx,
				outNBElement, outReal);
		System.out.println(rc);

		/*
		 * for(int i;i<100;i++){ expectedRoc[i] *= 100; expectedRoc[i] =
		 * Math.round(expectedRoc[0]); expectedRoc[i] /= 100; outReal[i] *= 100;
		 * outReal[i] = Math.round(outReal[0]); outReal[i] /= 100; }
		 */
		assertArrayEquals(expectedRoc, outReal, 0);

	}
}
