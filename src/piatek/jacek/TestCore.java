package piatek.jacek;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;

import org.junit.BeforeClass;
import org.junit.Test;

import com.tictactec.ta.lib.CandleSettingType;
import com.tictactec.ta.lib.Core;
import com.tictactec.ta.lib.MAType;
import com.tictactec.ta.lib.MInteger;
import com.tictactec.ta.lib.RetCode;

@SuppressWarnings("unused")
public class TestCore {

	static Core core;

	@BeforeClass
	public static void BeforeClass() {
		core = new Core();

	}

	@Test
	public void testMinMaxIndexDouble() {
		double[] inputsinReal = new double[] { -3.74899758, 8.79802864,
				-0.14931231, -1.56997335, 8.905047, 2.43794917, -2.57177967,
				1.50790575, 6.28525889, -1.23445402, 9.88264006, -1.54691191,
				-1.51678414, -3.87081489, 4.07341677, -0.83149575, 6.45639026,
				-1.40668908, 8.34046177, 9.20368065, 1.97305676, 5.5028895,
				0.3892627, 6.70370615, 3.56699067, -2.57179387, 7.53523663,
				2.19858521, 5.48588226, 9.68097963, 7.19059048, 8.10866271,
				-4.529799, 6.25455656, -4.83669727, -1.99595817, 3.38484571,
				-1.7680024, 7.80204145, 6.92049361, 4.10760653, 5.48334737,
				2.01051649, -0.5360123, 6.4349846, -2.66170544, 1.19188141,
				7.91933993, -3.36841844, 2.38718663, 2.16506187, -0.2284759,
				9.99706536, -0.61847578, 9.21486081, -4.47503721, 3.76539438,
				9.18354848, 2.41393234, -4.37380726, 3.33243095, 9.37342345,
				2.10308501, 7.85515609, 1.46622299, -2.80063882, -2.75484542,
				-2.71461047, 7.27986801, 4.844885, 4.02320845, 3.95716224,
				8.23032752, 8.35721476, 2.20199541, 8.31864306, -1.95679191,
				5.96352889, 0.25646777, 5.35602973, 0.84101548, -0.48664477,
				3.94578672, 4.57081955, 8.89711142, 0.27538303, 8.15521628,
				-0.00423427, 2.04744304, 3.39087975, 6.80225727, -0.41025659,
				7.66486885, -3.10303327, -2.95132038, 6.28905328, -4.18467174,
				3.64449126, 4.01208808, 6.83494132 };

		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		int[] outMinIdx = new int[1];
		int[] outMaxIdx = new int[1];
		/*
		 * Odejmujemy -1 od nr indeksu, który wyszed³ w excelu, poniewa¿ tutaj
		 * tablica liczy siê od 0, a w excelu o 1
		 */
		int[] expectedMin = { 35 - 1 };
		int[] expectedMax = { 53 - 1 };

		RetCode rc = core.minMaxIndex(0, 99, inputsinReal, 100, outBegIdx,
				outNBElement, outMinIdx, outMaxIdx);

		assertArrayEquals(expectedMin, outMinIdx);
		assertArrayEquals(expectedMax, outMaxIdx);
	}

	@Test
	public void testMinMaxIndexFloat() {
		float[] inputsinReal = new float[] { 5.13f, 2.08f, -2.71f, 6.56f,
				5.29f, 3.3f, 6.33f, -2.52f, 1.5f, 4.83f, -2.37f, -2.86f,
				-1.33f, 5.55f, 6.81f, -2.75f, -3.6f, 0.57f, 9.07f, 5.01f,
				0.76f, 7.46f, -1.1f, -2.11f, -0.55f, 5.4f, -4.42f, 7.62f,
				3.73f, 7.23f, 2.79f, 4.63f, 3.53f, 1.42f, -4.22f, 9.9f, 9.76f,
				8.47f, 1.08f, 9f, 0.79f, -4.58f, -1.93f, 8.55f, 7.56f, 4.37f,
				-2.92f, -1.04f, -1.73f, 0.01f, 8.47f, -3.51f, 9.74f, 9.45f,
				2.59f, 6.46f, 5.27f, 5.96f, -3.67f, 3.11f, -3.55f, 9.95f,
				3.41f, 6.57f, 8.57f, 1.89f, 1.53f, 7.22f, 6.5f, 0.28f, 8.45f,
				1.02f, 1.42f, 4.39f, -1.57f, -1.12f, 4.79f, -3.62f, 3.77f,
				2.41f, 3.44f, 4.38f, 0.78f, 8.81f, 5.85f, -1.57f, -3.81f,
				4.59f, -0.53f, 1.86f, 3.76f, 2.6f, 0.59f, -3.23f, 6.78f, 3.97f,
				-0.25f, 3.9f, 1.13f, -0.86f };

		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		int[] outMinIdx = new int[1];
		int[] outMaxIdx = new int[1];
		/*
		 * Odejmujemy -1 od nr indeksu, który wyszed³ w excelu, poniewa¿ tutaj
		 * tablica liczy siê od 0, a w excelu o 1
		 */
		int[] expectedMin = { 42 - 1 };
		int[] expectedMax = { 62 - 1 };

		RetCode rc = core.minMaxIndex(0, 99, inputsinReal, 100, outBegIdx,
				outNBElement, outMinIdx, outMaxIdx);

		assertArrayEquals(expectedMin, outMinIdx);
		assertArrayEquals(expectedMax, outMaxIdx);
	}

	@Test
	public void testMinIndexDouble() {
		double[] inputsinReal = new double[] { -3.74899758, 8.79802864,
				-0.14931231, -1.56997335, 8.905047, 2.43794917, -2.57177967,
				1.50790575, 6.28525889, -1.23445402, 9.88264006, -1.54691191,
				-1.51678414, -3.87081489, 4.07341677, -0.83149575, 6.45639026,
				-1.40668908, 8.34046177, 9.20368065, 1.97305676, 5.5028895,
				0.3892627, 6.70370615, 3.56699067, -2.57179387, 7.53523663,
				2.19858521, 5.48588226, 9.68097963, 7.19059048, 8.10866271,
				-4.529799, 6.25455656, -4.83669727, -1.99595817, 3.38484571,
				-1.7680024, 7.80204145, 6.92049361, 4.10760653, 5.48334737,
				2.01051649, -0.5360123, 6.4349846, -2.66170544, 1.19188141,
				7.91933993, -3.36841844, 2.38718663, 2.16506187, -0.2284759,
				9.99706536, -0.61847578, 9.21486081, -4.47503721, 3.76539438,
				9.18354848, 2.41393234, -4.37380726, 3.33243095, 9.37342345,
				2.10308501, 7.85515609, 1.46622299, -2.80063882, -2.75484542,
				-2.71461047, 7.27986801, 4.844885, 4.02320845, 3.95716224,
				8.23032752, 8.35721476, 2.20199541, 8.31864306, -1.95679191,
				5.96352889, 0.25646777, 5.35602973, 0.84101548, -0.48664477,
				3.94578672, 4.57081955, 8.89711142, 0.27538303, 8.15521628,
				-0.00423427, 2.04744304, 3.39087975, 6.80225727, -0.41025659,
				7.66486885, -3.10303327, -2.95132038, 6.28905328, -4.18467174,
				3.64449126, 4.01208808, 6.83494132 };
		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		int[] outInteger = new int[1];
		int[] expectedMin = { 35 - 1 };

		RetCode rc = core.minIndex(0, 99, inputsinReal, 100, outBegIdx,
				outNBElement, outInteger);
		assertArrayEquals(expectedMin, outInteger);
	}

	@Test
	public void testMaxIndexDouble() {
		double[] inputsinReal = new double[] { -3.74899758, 8.79802864,
				-0.14931231, -1.56997335, 8.905047, 2.43794917, -2.57177967,
				1.50790575, 6.28525889, -1.23445402, 9.88264006, -1.54691191,
				-1.51678414, -3.87081489, 4.07341677, -0.83149575, 6.45639026,
				-1.40668908, 8.34046177, 9.20368065, 1.97305676, 5.5028895,
				0.3892627, 6.70370615, 3.56699067, -2.57179387, 7.53523663,
				2.19858521, 5.48588226, 9.68097963, 7.19059048, 8.10866271,
				-4.529799, 6.25455656, -4.83669727, -1.99595817, 3.38484571,
				-1.7680024, 7.80204145, 6.92049361, 4.10760653, 5.48334737,
				2.01051649, -0.5360123, 6.4349846, -2.66170544, 1.19188141,
				7.91933993, -3.36841844, 2.38718663, 2.16506187, -0.2284759,
				9.99706536, -0.61847578, 9.21486081, -4.47503721, 3.76539438,
				9.18354848, 2.41393234, -4.37380726, 3.33243095, 9.37342345,
				2.10308501, 7.85515609, 1.46622299, -2.80063882, -2.75484542,
				-2.71461047, 7.27986801, 4.844885, 4.02320845, 3.95716224,
				8.23032752, 8.35721476, 2.20199541, 8.31864306, -1.95679191,
				5.96352889, 0.25646777, 5.35602973, 0.84101548, -0.48664477,
				3.94578672, 4.57081955, 8.89711142, 0.27538303, 8.15521628,
				-0.00423427, 2.04744304, 3.39087975, 6.80225727, -0.41025659,
				7.66486885, -3.10303327, -2.95132038, 6.28905328, -4.18467174,
				3.64449126, 4.01208808, 6.83494132 };
		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		int[] outInteger = new int[1];
		int[] expectedMax = { 53 - 1 };

		RetCode rc = core.maxIndex(0, 99, inputsinReal, 100, outBegIdx,
				outNBElement, outInteger);
		assertArrayEquals(expectedMax, outInteger);
	}

	@Test
	public void testMinDouble() {
		double[] inputsinReal = new double[] { -3.74899758, 8.79802864,
				-0.14931231, -1.56997335, 8.905047, 2.43794917, -2.57177967,
				1.50790575, 6.28525889, -1.23445402, 9.88264006, -1.54691191,
				-1.51678414, -3.87081489, 4.07341677, -0.83149575, 6.45639026,
				-1.40668908, 8.34046177, 9.20368065, 1.97305676, 5.5028895,
				0.3892627, 6.70370615, 3.56699067, -2.57179387, 7.53523663,
				2.19858521, 5.48588226, 9.68097963, 7.19059048, 8.10866271,
				-4.529799, 6.25455656, -4.83669727, -1.99595817, 3.38484571,
				-1.7680024, 7.80204145, 6.92049361, 4.10760653, 5.48334737,
				2.01051649, -0.5360123, 6.4349846, -2.66170544, 1.19188141,
				7.91933993, -3.36841844, 2.38718663, 2.16506187, -0.2284759,
				9.99706536, -0.61847578, 9.21486081, -4.47503721, 3.76539438,
				9.18354848, 2.41393234, -4.37380726, 3.33243095, 9.37342345,
				2.10308501, 7.85515609, 1.46622299, -2.80063882, -2.75484542,
				-2.71461047, 7.27986801, 4.844885, 4.02320845, 3.95716224,
				8.23032752, 8.35721476, 2.20199541, 8.31864306, -1.95679191,
				5.96352889, 0.25646777, 5.35602973, 0.84101548, -0.48664477,
				3.94578672, 4.57081955, 8.89711142, 0.27538303, 8.15521628,
				-0.00423427, 2.04744304, 3.39087975, 6.80225727, -0.41025659,
				7.66486885, -3.10303327, -2.95132038, 6.28905328, -4.18467174,
				3.64449126, 4.01208808, 6.83494132 };
		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		double[] outDouble = new double[1];
		double[] expectedMin = { -4.83669727 };

		RetCode rc = core.min(0, 99, inputsinReal, 100, outBegIdx,
				outNBElement, outDouble);
		assertArrayEquals(expectedMin, outDouble, 0);
	}

	@Test
	public void testMaxDouble() {
		double[] inputsinReal = new double[] { -3.74899758, 8.79802864,
				-0.14931231, -1.56997335, 8.905047, 2.43794917, -2.57177967,
				1.50790575, 6.28525889, -1.23445402, 9.88264006, -1.54691191,
				-1.51678414, -3.87081489, 4.07341677, -0.83149575, 6.45639026,
				-1.40668908, 8.34046177, 9.20368065, 1.97305676, 5.5028895,
				0.3892627, 6.70370615, 3.56699067, -2.57179387, 7.53523663,
				2.19858521, 5.48588226, 9.68097963, 7.19059048, 8.10866271,
				-4.529799, 6.25455656, -4.83669727, -1.99595817, 3.38484571,
				-1.7680024, 7.80204145, 6.92049361, 4.10760653, 5.48334737,
				2.01051649, -0.5360123, 6.4349846, -2.66170544, 1.19188141,
				7.91933993, -3.36841844, 2.38718663, 2.16506187, -0.2284759,
				9.99706536, -0.61847578, 9.21486081, -4.47503721, 3.76539438,
				9.18354848, 2.41393234, -4.37380726, 3.33243095, 9.37342345,
				2.10308501, 7.85515609, 1.46622299, -2.80063882, -2.75484542,
				-2.71461047, 7.27986801, 4.844885, 4.02320845, 3.95716224,
				8.23032752, 8.35721476, 2.20199541, 8.31864306, -1.95679191,
				5.96352889, 0.25646777, 5.35602973, 0.84101548, -0.48664477,
				3.94578672, 4.57081955, 8.89711142, 0.27538303, 8.15521628,
				-0.00423427, 2.04744304, 3.39087975, 6.80225727, -0.41025659,
				7.66486885, -3.10303327, -2.95132038, 6.28905328, -4.18467174,
				3.64449126, 4.01208808, 6.83494132 };
		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		double[] outDouble = new double[1];
		double[] expectedMax = { 9.99706536 };

		RetCode rc = core.max(0, 99, inputsinReal, 100, outBegIdx,
				outNBElement, outDouble);
		assertArrayEquals(expectedMax, outDouble, 0);
	}

	@Test
	public void testMinIndexFloat() {
		float[] inputsinReal = new float[] { 5.13f, 2.08f, -2.71f, 6.56f,
				5.29f, 3.3f, 6.33f, -2.52f, 1.5f, 4.83f, -2.37f, -2.86f,
				-1.33f, 5.55f, 6.81f, -2.75f, -3.6f, 0.57f, 9.07f, 5.01f,
				0.76f, 7.46f, -1.1f, -2.11f, -0.55f, 5.4f, -4.42f, 7.62f,
				3.73f, 7.23f, 2.79f, 4.63f, 3.53f, 1.42f, -4.22f, 9.9f, 9.76f,
				8.47f, 1.08f, 9f, 0.79f, -4.58f, -1.93f, 8.55f, 7.56f, 4.37f,
				-2.92f, -1.04f, -1.73f, 0.01f, 8.47f, -3.51f, 9.74f, 9.45f,
				2.59f, 6.46f, 5.27f, 5.96f, -3.67f, 3.11f, -3.55f, 9.95f,
				3.41f, 6.57f, 8.57f, 1.89f, 1.53f, 7.22f, 6.5f, 0.28f, 8.45f,
				1.02f, 1.42f, 4.39f, -1.57f, -1.12f, 4.79f, -3.62f, 3.77f,
				2.41f, 3.44f, 4.38f, 0.78f, 8.81f, 5.85f, -1.57f, -3.81f,
				4.59f, -0.53f, 1.86f, 3.76f, 2.6f, 0.59f, -3.23f, 6.78f, 3.97f,
				-0.25f, 3.9f, 1.13f, -0.86f };
		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		int[] outInteger = new int[1];
		int[] expectedMin = { 42 - 1 };

		RetCode rc = core.minIndex(0, 99, inputsinReal, 100, outBegIdx,
				outNBElement, outInteger);
		assertArrayEquals(expectedMin, outInteger);
	}

	@Test
	public void testMaxIndexFloat() {
		float[] inputsinReal = new float[] { 5.13f, 2.08f, -2.71f, 6.56f,
				5.29f, 3.3f, 6.33f, -2.52f, 1.5f, 4.83f, -2.37f, -2.86f,
				-1.33f, 5.55f, 6.81f, -2.75f, -3.6f, 0.57f, 9.07f, 5.01f,
				0.76f, 7.46f, -1.1f, -2.11f, -0.55f, 5.4f, -4.42f, 7.62f,
				3.73f, 7.23f, 2.79f, 4.63f, 3.53f, 1.42f, -4.22f, 9.9f, 9.76f,
				8.47f, 1.08f, 9f, 0.79f, -4.58f, -1.93f, 8.55f, 7.56f, 4.37f,
				-2.92f, -1.04f, -1.73f, 0.01f, 8.47f, -3.51f, 9.74f, 9.45f,
				2.59f, 6.46f, 5.27f, 5.96f, -3.67f, 3.11f, -3.55f, 9.95f,
				3.41f, 6.57f, 8.57f, 1.89f, 1.53f, 7.22f, 6.5f, 0.28f, 8.45f,
				1.02f, 1.42f, 4.39f, -1.57f, -1.12f, 4.79f, -3.62f, 3.77f,
				2.41f, 3.44f, 4.38f, 0.78f, 8.81f, 5.85f, -1.57f, -3.81f,
				4.59f, -0.53f, 1.86f, 3.76f, 2.6f, 0.59f, -3.23f, 6.78f, 3.97f,
				-0.25f, 3.9f, 1.13f, -0.86f };
		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		int[] outInteger = new int[1];
		int[] expectedMin = { 62 - 1 };

		RetCode rc = core.maxIndex(0, 99, inputsinReal, 100, outBegIdx,
				outNBElement, outInteger);
		assertArrayEquals(expectedMin, outInteger);
	}

	@Test
	public void testMinFloat() {
		float[] inputsinReal = new float[] { 5.13f, 2.08f, -2.71f, 6.56f,
				5.29f, 3.3f, 6.33f, -2.52f, 1.5f, 4.83f, -2.37f, -2.86f,
				-1.33f, 5.55f, 6.81f, -2.75f, -3.6f, 0.57f, 9.07f, 5.01f,
				0.76f, 7.46f, -1.1f, -2.11f, -0.55f, 5.4f, -4.42f, 7.62f,
				3.73f, 7.23f, 2.79f, 4.63f, 3.53f, 1.42f, -4.22f, 9.9f, 9.76f,
				8.47f, 1.08f, 9f, 0.79f, -4.58f, -1.93f, 8.55f, 7.56f, 4.37f,
				-2.92f, -1.04f, -1.73f, 0.01f, 8.47f, -3.51f, 9.74f, 9.45f,
				2.59f, 6.46f, 5.27f, 5.96f, -3.67f, 3.11f, -3.55f, 9.95f,
				3.41f, 6.57f, 8.57f, 1.89f, 1.53f, 7.22f, 6.5f, 0.28f, 8.45f,
				1.02f, 1.42f, 4.39f, -1.57f, -1.12f, 4.79f, -3.62f, 3.77f,
				2.41f, 3.44f, 4.38f, 0.78f, 8.81f, 5.85f, -1.57f, -3.81f,
				4.59f, -0.53f, 1.86f, 3.76f, 2.6f, 0.59f, -3.23f, 6.78f, 3.97f,
				-0.25f, 3.9f, 1.13f, -0.86f };
		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		double[] outDouble = new double[1];
		double[] expectedMin = { -4.58f };

		RetCode rc = core.min(0, 99, inputsinReal, 100, outBegIdx,
				outNBElement, outDouble);
		assertArrayEquals(expectedMin, outDouble, 0);
	}

	@Test
	public void testMaxFloat() {
		float[] inputsinReal = new float[] { 5.13f, 2.08f, -2.71f, 6.56f,
				5.29f, 3.3f, 6.33f, -2.52f, 1.5f, 4.83f, -2.37f, -2.86f,
				-1.33f, 5.55f, 6.81f, -2.75f, -3.6f, 0.57f, 9.07f, 5.01f,
				0.76f, 7.46f, -1.1f, -2.11f, -0.55f, 5.4f, -4.42f, 7.62f,
				3.73f, 7.23f, 2.79f, 4.63f, 3.53f, 1.42f, -4.22f, 9.9f, 9.76f,
				8.47f, 1.08f, 9f, 0.79f, -4.58f, -1.93f, 8.55f, 7.56f, 4.37f,
				-2.92f, -1.04f, -1.73f, 0.01f, 8.47f, -3.51f, 9.74f, 9.45f,
				2.59f, 6.46f, 5.27f, 5.96f, -3.67f, 3.11f, -3.55f, 9.95f,
				3.41f, 6.57f, 8.57f, 1.89f, 1.53f, 7.22f, 6.5f, 0.28f, 8.45f,
				1.02f, 1.42f, 4.39f, -1.57f, -1.12f, 4.79f, -3.62f, 3.77f,
				2.41f, 3.44f, 4.38f, 0.78f, 8.81f, 5.85f, -1.57f, -3.81f,
				4.59f, -0.53f, 1.86f, 3.76f, 2.6f, 0.59f, -3.23f, 6.78f, 3.97f,
				-0.25f, 3.9f, 1.13f, -0.86f };
		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		double[] outDouble = new double[1];
		double[] expectedMax = { 9.95f };

		RetCode rc = core.max(0, 99, inputsinReal, 100, outBegIdx,
				outNBElement, outDouble);

		assertArrayEquals(expectedMax, outDouble, 0);
	}

	@Test
	public void wmaFloat() {
		float[] inputsinReal = new float[] { 5.13f, 2.08f, -2.71f, 6.56f,
				5.29f, 3.3f, 6.33f, -2.52f, 1.5f, 4.83f, -2.37f, -2.86f,
				-1.33f, 5.55f, 6.81f, -2.75f, -3.6f, 0.57f, 9.07f, 5.01f,
				0.76f, 7.46f, -1.1f, -2.11f, -0.55f, 5.4f, -4.42f, 7.62f,
				3.73f, 7.23f, 2.79f, 4.63f, 3.53f, 1.42f, -4.22f, 9.9f, 9.76f,
				8.47f, 1.08f, 9f, 0.79f, -4.58f, -1.93f, 8.55f, 7.56f, 4.37f,
				-2.92f, -1.04f, -1.73f, 0.01f, 8.47f, -3.51f, 9.74f, 9.45f,
				2.59f, 6.46f, 5.27f, 5.96f, -3.67f, 3.11f, -3.55f, 9.95f,
				3.41f, 6.57f, 8.57f, 1.89f, 1.53f, 7.22f, 6.5f, 0.28f, 8.45f,
				1.02f, 1.42f, 4.39f, -1.57f, -1.12f, 4.79f, -3.62f, 3.77f,
				2.41f, 3.44f, 4.38f, 0.78f, 8.81f, 5.85f, -1.57f, -3.81f,
				4.59f, -0.53f, 1.86f, 3.76f, 2.6f, 0.59f, -3.23f, 6.78f, 3.97f,
				-0.25f, 3.9f, 1.13f, -0.86f };
		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		double[] outReal = new double[1];
		// double[] expectedWma = { 2,68833861386139 };
		// double[] expectedWma = { 2.688338613861387f };

		RetCode rc = core.wma(0, 99, inputsinReal, 100, outBegIdx,
				outNBElement, outReal);
		double[] val2 = new double[1];
		val2[0] = 2.688338613861387;
		val2[0] *= 100;
		val2[0] = Math.round(val2[0]);
		val2[0] /= 10000;
		double[] val = new double[1];
		val[0] = outReal[0];
		val[0] *= 100;
		val[0] = Math.round(val[0]);
		val[0] /= 10000;
		assertArrayEquals(val2, val, 0);
	}

	@Test
	public void wmaDouble() {
		double[] inputsinReal = new double[] { -3.74899758, 8.79802864,
				-0.14931231, -1.56997335, 8.905047, 2.43794917, -2.57177967,
				1.50790575, 6.28525889, -1.23445402, 9.88264006, -1.54691191,
				-1.51678414, -3.87081489, 4.07341677, -0.83149575, 6.45639026,
				-1.40668908, 8.34046177, 9.20368065, 1.97305676, 5.5028895,
				0.3892627, 6.70370615, 3.56699067, -2.57179387, 7.53523663,
				2.19858521, 5.48588226, 9.68097963, 7.19059048, 8.10866271,
				-4.529799, 6.25455656, -4.83669727, -1.99595817, 3.38484571,
				-1.7680024, 7.80204145, 6.92049361, 4.10760653, 5.48334737,
				2.01051649, -0.5360123, 6.4349846, -2.66170544, 1.19188141,
				7.91933993, -3.36841844, 2.38718663, 2.16506187, -0.2284759,
				9.99706536, -0.61847578, 9.21486081, -4.47503721, 3.76539438,
				9.18354848, 2.41393234, -4.37380726, 3.33243095, 9.37342345,
				2.10308501, 7.85515609, 1.46622299, -2.80063882, -2.75484542,
				-2.71461047, 7.27986801, 4.844885, 4.02320845, 3.95716224,
				8.23032752, 8.35721476, 2.20199541, 8.31864306, -1.95679191,
				5.96352889, 0.25646777, 5.35602973, 0.84101548, -0.48664477,
				3.94578672, 4.57081955, 8.89711142, 0.27538303, 8.15521628,
				-0.00423427, 2.04744304, 3.39087975, 6.80225727, -0.41025659,
				7.66486885, -3.10303327, -2.95132038, 6.28905328, -4.18467174,
				3.64449126, 4.01208808, 6.83494132 };
		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		double[] outReal = new double[1];
		// double[] expectedWma = { 2,68833861386139 };
		// double[] expectedWma = { 3.036157028362376 };

		RetCode rc = core.wma(0, 99, inputsinReal, 100, outBegIdx,
				outNBElement, outReal);
		double[] val2 = new double[1];
		val2[0] = 3.036157028362376;
		val2[0] *= 100;
		val2[0] = Math.round(val2[0]);
		val2[0] /= 10000;
		double[] val = new double[1];
		val[0] = outReal[0];
		val[0] *= 100;
		val[0] = Math.round(val[0]);
		val[0] /= 10000;
		assertArrayEquals(val2, val, 0);
	}

	/*
	 * @Test public void linearReg() { double[] inputsinReal = new double[] {
	 * -3.74899758, 8.79802864, -0.14931231, -1.56997335, 8.905047, 2.43794917,
	 * -2.57177967, 1.50790575, 6.28525889, -1.23445402, 9.88264006,
	 * -1.54691191, -1.51678414, -3.87081489, 4.07341677, -0.83149575,
	 * 6.45639026, -1.40668908, 8.34046177, 9.20368065, 1.97305676, 5.5028895,
	 * 0.3892627, 6.70370615, 3.56699067, -2.57179387, 7.53523663, 2.19858521,
	 * 5.48588226, 9.68097963, 7.19059048, 8.10866271, -4.529799, 6.25455656,
	 * -4.83669727, -1.99595817, 3.38484571, -1.7680024, 7.80204145, 6.92049361,
	 * 4.10760653, 5.48334737, 2.01051649, -0.5360123, 6.4349846, -2.66170544,
	 * 1.19188141, 7.91933993, -3.36841844, 2.38718663, 2.16506187, -0.2284759,
	 * 9.99706536, -0.61847578, 9.21486081, -4.47503721, 3.76539438, 9.18354848,
	 * 2.41393234, -4.37380726, 3.33243095, 9.37342345, 2.10308501, 7.85515609,
	 * 1.46622299, -2.80063882, -2.75484542, -2.71461047, 7.27986801, 4.844885,
	 * 4.02320845, 3.95716224, 8.23032752, 8.35721476, 2.20199541, 8.31864306,
	 * -1.95679191, 5.96352889, 0.25646777, 5.35602973, 0.84101548, -0.48664477,
	 * 3.94578672, 4.57081955, 8.89711142, 0.27538303, 8.15521628, -0.00423427,
	 * 2.04744304, 3.39087975, 6.80225727, -0.41025659, 7.66486885, -3.10303327,
	 * -2.95132038, 6.28905328, -4.18467174, 3.64449126, 4.01208808, 6.83494132
	 * }; MInteger outBegIdx = new MInteger(); MInteger outNBElement = new
	 * MInteger(); double[] outReal = new double[100]; //double[] expectedWma =
	 * { 2,68833861386139 }; //double[] expectedWma = { -0.00174917491749175 };
	 * 
	 * 
	 * RetCode rc = core.linearReg(0, 99, inputsinReal, 100, outBegIdx,
	 * outNBElement, outReal); //System.out.println(outReal[i]);
	 * 
	 * 
	 * double[] val2 = new double[1]; val2[0] = -0.00174917491749175; val2[0] *=
	 * 100; val2[0] = Math.round(val2[0]); val2[0] /= 10000; double[] val = new
	 * double[1]; val[0] = outReal[6]; val[0] *= 100; val[0] =
	 * Math.round(val[0]); val[0] /= 10000; for(int i=0;i<100;i++){
	 * System.out.println(outReal[i]); } assertArrayEquals(val2, val, 0);
	 * 
	 * }
	 */
	/*
	 * @Test public void linearReg() { double[] inputsinReal = new double[] {
	 * -3.74899758, 8.79802864, -0.14931231, -1.56997335, 8.905047, 2.43794917,
	 * -2.57177967, 1.50790575, 6.28525889, -1.23445402, 9.88264006,
	 * -1.54691191, -1.51678414, -3.87081489, 4.07341677, -0.83149575,
	 * 6.45639026, -1.40668908, 8.34046177, 9.20368065, 1.97305676, 5.5028895,
	 * 0.3892627, 6.70370615, 3.56699067, -2.57179387, 7.53523663, 2.19858521,
	 * 5.48588226, 9.68097963, 7.19059048, 8.10866271, -4.529799, 6.25455656,
	 * -4.83669727, -1.99595817, 3.38484571, -1.7680024, 7.80204145, 6.92049361,
	 * 4.10760653, 5.48334737, 2.01051649, -0.5360123, 6.4349846, -2.66170544,
	 * 1.19188141, 7.91933993, -3.36841844, 2.38718663, 2.16506187, -0.2284759,
	 * 9.99706536, -0.61847578, 9.21486081, -4.47503721, 3.76539438, 9.18354848,
	 * 2.41393234, -4.37380726, 3.33243095, 9.37342345, 2.10308501, 7.85515609,
	 * 1.46622299, -2.80063882, -2.75484542, -2.71461047, 7.27986801, 4.844885,
	 * 4.02320845, 3.95716224, 8.23032752, 8.35721476, 2.20199541, 8.31864306,
	 * -1.95679191, 5.96352889, 0.25646777, 5.35602973, 0.84101548, -0.48664477,
	 * 3.94578672, 4.57081955, 8.89711142, 0.27538303, 8.15521628, -0.00423427,
	 * 2.04744304, 3.39087975, 6.80225727, -0.41025659, 7.66486885, -3.10303327,
	 * -2.95132038, 6.28905328, -4.18467174, 3.64449126, 4.01208808, 6.83494132
	 * }; MInteger outBegIdx = new MInteger(); MInteger outNBElement = new
	 * MInteger(); double[] outReal = new double[100]; //double[] expectedWma =
	 * { 2,68833861386139 }; //double[] expectedWma = { -0.00174917491749175 };
	 * 
	 * 
	 * RetCode rc = core.tsf(0, 99, inputsinReal, 100, outBegIdx, outNBElement,
	 * outReal); //System.out.println(outReal[i]);
	 * 
	 * 
	 * double[] val2 = new double[1]; val2[0] = 2.6265458688495; val2[0] *= 100;
	 * val2[0] = Math.round(val2[0]); val2[0] /= 10000; double[] val = new
	 * double[1]; val[0] = outReal[0]; val[0] *= 100; val[0] =
	 * Math.round(val[0]); val[0] /= 10000; assertArrayEquals(val2, val, 0);
	 * 
	 * }
	 */
	@Test
	public void stdDevDouble() {
		double[] inputsinReal = new double[] { -3.74899758, 8.79802864,
				-0.14931231, -1.56997335, 8.905047, 2.43794917, -2.57177967,
				1.50790575, 6.28525889, -1.23445402, 9.88264006, -1.54691191,
				-1.51678414, -3.87081489, 4.07341677, -0.83149575, 6.45639026,
				-1.40668908, 8.34046177, 9.20368065, 1.97305676, 5.5028895,
				0.3892627, 6.70370615, 3.56699067, -2.57179387, 7.53523663,
				2.19858521, 5.48588226, 9.68097963, 7.19059048, 8.10866271,
				-4.529799, 6.25455656, -4.83669727, -1.99595817, 3.38484571,
				-1.7680024, 7.80204145, 6.92049361, 4.10760653, 5.48334737,
				2.01051649, -0.5360123, 6.4349846, -2.66170544, 1.19188141,
				7.91933993, -3.36841844, 2.38718663, 2.16506187, -0.2284759,
				9.99706536, -0.61847578, 9.21486081, -4.47503721, 3.76539438,
				9.18354848, 2.41393234, -4.37380726, 3.33243095, 9.37342345,
				2.10308501, 7.85515609, 1.46622299, -2.80063882, -2.75484542,
				-2.71461047, 7.27986801, 4.844885, 4.02320845, 3.95716224,
				8.23032752, 8.35721476, 2.20199541, 8.31864306, -1.95679191,
				5.96352889, 0.25646777, 5.35602973, 0.84101548, -0.48664477,
				3.94578672, 4.57081955, 8.89711142, 0.27538303, 8.15521628,
				-0.00423427, 2.04744304, 3.39087975, 6.80225727, -0.41025659,
				7.66486885, -3.10303327, -2.95132038, 6.28905328, -4.18467174,
				3.64449126, 4.01208808, 6.83494132 };
		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		double[] outReal = new double[1];
		double optInNbDev = 1;
		double[] expectedWma = { 4.313824434190533 };

		RetCode rc = core.stdDev(0, 99, inputsinReal, 100, optInNbDev,
				outBegIdx, outNBElement, outReal);
		double[] val2 = new double[1];
		val2[0] = 4.31382443419053300;
		val2[0] *= 100;
		val2[0] = Math.round(val2[0]);
		val2[0] /= 10000;
		double[] val = new double[1];
		val[0] = outReal[0];
		val[0] *= 100;
		val[0] = Math.round(val[0]);
		val[0] /= 10000;
		assertArrayEquals(val2, val, 0);

	}

	@Test
	public void stdDevFloat() {
		float[] inputsinReal = new float[] { 5.13f, 2.08f, -2.71f, 6.56f,
				5.29f, 3.3f, 6.33f, -2.52f, 1.5f, 4.83f, -2.37f, -2.86f,
				-1.33f, 5.55f, 6.81f, -2.75f, -3.6f, 0.57f, 9.07f, 5.01f,
				0.76f, 7.46f, -1.1f, -2.11f, -0.55f, 5.4f, -4.42f, 7.62f,
				3.73f, 7.23f, 2.79f, 4.63f, 3.53f, 1.42f, -4.22f, 9.9f, 9.76f,
				8.47f, 1.08f, 9f, 0.79f, -4.58f, -1.93f, 8.55f, 7.56f, 4.37f,
				-2.92f, -1.04f, -1.73f, 0.01f, 8.47f, -3.51f, 9.74f, 9.45f,
				2.59f, 6.46f, 5.27f, 5.96f, -3.67f, 3.11f, -3.55f, 9.95f,
				3.41f, 6.57f, 8.57f, 1.89f, 1.53f, 7.22f, 6.5f, 0.28f, 8.45f,
				1.02f, 1.42f, 4.39f, -1.57f, -1.12f, 4.79f, -3.62f, 3.77f,
				2.41f, 3.44f, 4.38f, 0.78f, 8.81f, 5.85f, -1.57f, -3.81f,
				4.59f, -0.53f, 1.86f, 3.76f, 2.6f, 0.59f, -3.23f, 6.78f, 3.97f,
				-0.25f, 3.9f, 1.13f, -0.86f };
		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		double[] outReal = new double[1];
		double optInNbDev = 1;
		double[] expectedWma = { 4.12119426380267 };

		RetCode rc = core.stdDev(0, 99, inputsinReal, 100, optInNbDev,
				outBegIdx, outNBElement, outReal);
		double[] val2 = new double[1];
		val2[0] = 4.12119426380267;
		val2[0] *= 100;
		val2[0] = Math.round(val2[0]);
		val2[0] /= 10000;
		double[] val = new double[1];
		val[0] = outReal[0];
		val[0] *= 100;
		val[0] = Math.round(val[0]);
		val[0] /= 10000;
		assertArrayEquals(val2, val, 0);

	}

	/*
	 * @Test public void stdMidPrice() { float[] inLow = new float[] { -5.09f,
	 * -9.84f, -5.55f, -5.83f, -7.64f, -1.83f, -5.19f, -8.25f, -9.74f, 0.02f,
	 * -3.56f, -9.69f, -2.42f, -3f, -9.15f, -9.34f, -3.36f, -0.06f, -2.7f,
	 * -2.05f, -8.27f, -8.34f, -0.32f, 0.17f, -0.91f, -9.15f, -2.37f, -6.51f,
	 * -2.92f, -4.48f, -9.79f, -3.45f, -9.44f, -6.36f, -5.65f, -3.2f, -7.8f,
	 * -6.45f, 0.22f, -9.04f, -6.25f, -9.8f, 0.28f, -5.75f, 0.8f, -4.8f, -9.18f,
	 * -0.37f, -3.33f, -1.5f, -9.92f, -9.73f, 0.51f, 0.85f, -4.49f, -7.44f,
	 * -0.1f, -4.36f, -9.49f, -0.68f, -7.77f, -2.56f, -6.89f, -8.51f, -6.7f,
	 * -3.18f, 0.72f, -6.76f, -0.05f, -2.12f, 0.11f, -1.87f, -6.77f, -1.89f,
	 * -4.74f, -9.45f, -9.55f, -0.67f, 0.78f, -3.2f, -5.9f, -3.84f, -8.64f,
	 * -7.13f, -8.92f, -0.65f, -4.8f, -7.11f, -6.64f, -2.13f, -8.94f, -9.38f,
	 * -8.29f, -1.48f, -8.76f, -6.29f, -4.56f, -5.33f, -8.45f, -0.81f }; float[]
	 * inHigh = new float[] { 5.38f, 8.95f, 5.77f, 3.85f, 4.25f, 3.35f, 5.67f,
	 * 6.37f, 4.31f, 9.72f, 7.32f, 8.95f, 2.32f, 8.03f, 7.14f, 5.27f, 5.36f,
	 * 6.75f, 5.83f, 5.59f, 1.12f, 8.08f, 2.11f, 8.89f, 3.03f, 2.04f, 1.96f,
	 * 3.29f, 2.9f, 2.82f, 8.63f, 1.86f, 9f, 9.98f, 6.86f, 8.05f, 6.45f, 6.4f,
	 * 9.56f, 6.23f, 8.14f, 5.6f, 5.9f, 5.9f, 1.05f, 6.77f, 7.23f, 4.97f, 8.01f,
	 * 5.31f, 9.72f, 9.65f, 1.76f, 4.97f, 8.85f, 5.94f, 9.83f, 1.7f, 9.54f,
	 * 4.4f, 3.07f, 6.39f, 5.3f, 7.76f, 5.37f, 7.14f, 7.23f, 8.99f, 5.72f,
	 * 5.33f, 8.83f, 1.19f, 9.41f, 8.92f, 4.36f, 8.62f, 6.57f, 1.57f, 2.73f,
	 * 3.49f, 3.94f, 7.1f, 8.68f, 1.03f, 9.89f, 3.01f, 9.58f, 6.56f, 8.44f,
	 * 6.2f, 5.78f, 4.68f, 9.32f, 1.64f, 9.88f, 5.48f, 4.31f, 8.62f, 6.2f, 3.27f
	 * }; MInteger outBegIdx = new MInteger(); MInteger outNBElement = new
	 * MInteger(); double[] outReal = new double[1]; double optInNbDev = 1;
	 * double[] expectedMidPrice = { 4.12119426380267 };
	 * 
	 * RetCode rc = core.midPrice(0, 99, inHigh, inLow, 100, outBegIdx,
	 * outNBElement, outReal); assertArrayEquals(expectedMidPrice, outReal, 0);
	 * 
	 * }
	 */

	@Test
	public void sumFloat() {
		float[] inReal = new float[] { 5.13f, 2.08f, -2.71f, 6.56f, 5.29f,
				3.3f, 6.33f, -2.52f, 1.5f, 4.83f, -2.37f, -2.86f, -1.33f,
				5.55f, 6.81f, -2.75f, -3.6f, 0.57f, 9.07f, 5.01f, 0.76f, 7.46f,
				-1.1f, -2.11f, -0.55f, 5.4f, -4.42f, 7.62f, 3.73f, 7.23f,
				2.79f, 4.63f, 3.53f, 1.42f, -4.22f, 9.9f, 9.76f, 8.47f, 1.08f,
				9f, 0.79f, -4.58f, -1.93f, 8.55f, 7.56f, 4.37f, -2.92f, -1.04f,
				-1.73f, 0.01f, 8.47f, -3.51f, 9.74f, 9.45f, 2.59f, 6.46f,
				5.27f, 5.96f, -3.67f, 3.11f, -3.55f, 9.95f, 3.41f, 6.57f,
				8.57f, 1.89f, 1.53f, 7.22f, 6.5f, 0.28f, 8.45f, 1.02f, 1.42f,
				4.39f, -1.57f, -1.12f, 4.79f, -3.62f, 3.77f, 2.41f, 3.44f,
				4.38f, 0.78f, 8.81f, 5.85f, -1.57f, -3.81f, 4.59f, -0.53f,
				1.86f, 3.76f, 2.6f, 0.59f, -3.23f, 6.78f, 3.97f, -0.25f, 3.9f,
				1.13f, -0.86f };

		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		double[] outReal = new double[1];

		RetCode rc = core.sum(0, 99, inReal, 100, outBegIdx, outNBElement,
				outReal);
		double[] val2 = new double[1];
		val2[0] = 271.72;
		val2[0] *= 100;
		val2[0] = Math.round(val2[0]);
		val2[0] /= 100;
		double[] val = new double[1];
		val[0] = outReal[0];
		val[0] *= 100;
		val[0] = Math.round(val[0]);
		val[0] /= 100;
		assertArrayEquals(val2, val, 0);

	}

	@Test
	public void sumDouble() {
		double[] inputsinReal = new double[] { -3.74899758, 8.79802864,
				-0.14931231, -1.56997335, 8.905047, 2.43794917, -2.57177967,
				1.50790575, 6.28525889, -1.23445402, 9.88264006, -1.54691191,
				-1.51678414, -3.87081489, 4.07341677, -0.83149575, 6.45639026,
				-1.40668908, 8.34046177, 9.20368065, 1.97305676, 5.5028895,
				0.3892627, 6.70370615, 3.56699067, -2.57179387, 7.53523663,
				2.19858521, 5.48588226, 9.68097963, 7.19059048, 8.10866271,
				-4.529799, 6.25455656, -4.83669727, -1.99595817, 3.38484571,
				-1.7680024, 7.80204145, 6.92049361, 4.10760653, 5.48334737,
				2.01051649, -0.5360123, 6.4349846, -2.66170544, 1.19188141,
				7.91933993, -3.36841844, 2.38718663, 2.16506187, -0.2284759,
				9.99706536, -0.61847578, 9.21486081, -4.47503721, 3.76539438,
				9.18354848, 2.41393234, -4.37380726, 3.33243095, 9.37342345,
				2.10308501, 7.85515609, 1.46622299, -2.80063882, -2.75484542,
				-2.71461047, 7.27986801, 4.844885, 4.02320845, 3.95716224,
				8.23032752, 8.35721476, 2.20199541, 8.31864306, -1.95679191,
				5.96352889, 0.25646777, 5.35602973, 0.84101548, -0.48664477,
				3.94578672, 4.57081955, 8.89711142, 0.27538303, 8.15521628,
				-0.00423427, 2.04744304, 3.39087975, 6.80225727, -0.41025659,
				7.66486885, -3.10303327, -2.95132038, 6.28905328, -4.18467174,
				3.64449126, 4.01208808, 6.83494132 };

		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		double[] outReal = new double[1];

		RetCode rc = core.sum(0, 99, inputsinReal, 100, outBegIdx,
				outNBElement, outReal);
		double[] val2 = new double[1];
		val2[0] = 293.37584647;
		val2[0] *= 100;
		val2[0] = Math.round(val2[0]);
		val2[0] /= 100;
		double[] val = new double[1];
		val[0] = outReal[0];
		val[0] *= 100;
		val[0] = Math.round(val[0]);
		val[0] /= 100;
		assertArrayEquals(val2, val, 0);

	}

	@Test
	public void rocDouble() {
		/*
		 * Pojebana metoda ale rozgzys³em. A mianowicie formu³a jest prost
		 * bierze ((cene/cena poprzednia)-1)*100 tylko, ¿e trzeba odpowiednio
		 * inTimePeriod ustawic i w tym przypadku nie jest to 100 (liczba
		 * elementów) tylko 1. Liczba od którego ma siê zacz¹c liczenie z
		 * tablicy 0 nie mo¿e byc bo nie ma poprzedniej ceny, musi byc 1.
		 */
		double[] inputsinReal = new double[] { -3.74899758, 8.79802864,
				-0.14931231, -1.56997335, 8.905047, 2.43794917, -2.57177967,
				1.50790575, 6.28525889, -1.23445402, 9.88264006, -1.54691191,
				-1.51678414, -3.87081489, 4.07341677, -0.83149575, 6.45639026,
				-1.40668908, 8.34046177, 9.20368065, 1.97305676, 5.5028895,
				0.3892627, 6.70370615, 3.56699067, -2.57179387, 7.53523663,
				2.19858521, 5.48588226, 9.68097963, 7.19059048, 8.10866271,
				-4.529799, 6.25455656, -4.83669727, -1.99595817, 3.38484571,
				-1.7680024, 7.80204145, 6.92049361, 4.10760653, 5.48334737,
				2.01051649, -0.5360123, 6.4349846, -2.66170544, 1.19188141,
				7.91933993, -3.36841844, 2.38718663, 2.16506187, -0.2284759,
				9.99706536, -0.61847578, 9.21486081, -4.47503721, 3.76539438,
				9.18354848, 2.41393234, -4.37380726, 3.33243095, 9.37342345,
				2.10308501, 7.85515609, 1.46622299, -2.80063882, -2.75484542,
				-2.71461047, 7.27986801, 4.844885, 4.02320845, 3.95716224,
				8.23032752, 8.35721476, 2.20199541, 8.31864306, -1.95679191,
				5.96352889, 0.25646777, 5.35602973, 0.84101548, -0.48664477,
				3.94578672, 4.57081955, 8.89711142, 0.27538303, 8.15521628,
				-0.00423427, 2.04744304, 3.39087975, 6.80225727, -0.41025659,
				7.66486885, -3.10303327, -2.95132038, 6.28905328, -4.18467174,
				3.64449126, 4.01208808, 6.83494132 };
		double[] expectedRoc = new double[] { -334.6768289991801,
				-101.69711097917045, 951.4694669180324, -667.2100739799182,
				-72.62283770091275, -205.48947047981318, -158.63277354548805,
				316.8204073762568, -119.64046416551028, -900.5676922660917,
				-115.65282050755981, -1.9476073463032595, 155.19879776696507,
				-205.23408857714713, -120.41273449168817, -876.4790451424435,
				-121.78754727258385, -692.914375222135, 10.34977323563706,
				-78.56230746120032, 178.9017331665613, -92.92621267426867,
				1622.1547684892491, -46.790766328562896, -172.09982049097988,
				-392.9953569723688, -70.82261224223824, 149.51874664889607,
				76.47078758121214, -25.724557278094384, 12.767689003476669,
				-155.86369987265138, -238.07580777866747, -177.33077834697846,
				-58.73303499104463, -269.5850023750748, -152.232880062353,
				-541.2913381791789, -11.298938177263839, -40.64575792592922,
				33.492517600024364, -63.334139635220666, -126.66042793809665,
				-1300.5292788990105, -141.3630428890226, -144.7788621568884,
				564.4402592033045, -142.53408074124684, -170.86965804640352,
				-9.304876175517107, -110.55285778045688, -4475.544799254539,
				-106.18657333655763, -1589.9307471668494, -148.5632642995939,
				-184.14219152381082, 143.89340274098993, -73.7146012213353,
				-281.1901347657491, -176.19062185195605, 181.27884990385175,
				-77.56332015492163, 273.50635150977564, -81.3342602845719,
				-291.01042877523014, -1.635105522103708, -1.460515704725085,
				-368.17357740464325, -33.448175250638926, -16.959670869380794,
				-1.6416303261641896, 107.98559727487947, 1.5417034096353976,
				-73.65156366999955, 277.7774931874177, -123.52296998303952,
				-404.76050414578833, -95.69939586559126, 1988.3831640911453,
				-84.29778170779497, -157.8639491867617, -910.8145742530019,
				15.840512281920805, 94.65024428715414, -96.90480407628749,
				2861.408435370909, -100.05192100190384, -48454.09740049642,
				65.61533990220308, 100.60449710727725, -106.03118308696371,
				-1968.3109636337595, -140.483840372559, -4.889180256839465,
				-313.0928693007569, -166.53897738961433, -187.09144913717893,
				10.08636854297189, 70.3587055845494 };
		double[] expectedRoc2 = new double[] { -334.6768289991801,
				-101.69711097917045, 951.4694669180324, -667.2100739799182,
				-72.62283770091275, -205.48947047981318, -158.63277354548805,
				316.8204073762568, -119.64046416551028 };

		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		double[] outReal = new double[99];

		RetCode rc = core.roc(0, 99, inputsinReal, 1, outBegIdx, outNBElement,
				outReal);

		assertArrayEquals(expectedRoc, outReal, 0);

		RetCode rb = core.roc(-10, 99, inputsinReal, 1, outBegIdx,
				outNBElement, outReal);
		assertEquals(RetCode.OutOfRangeStartIndex.toString(), rb.toString());

		RetCode rb1 = core.roc(0, -2, inputsinReal, 1, outBegIdx, outNBElement,
				outReal);
		assertEquals(RetCode.OutOfRangeEndIndex.toString(), rb1.toString());

		RetCode rb2 = core.roc(0, 99, inputsinReal, 0, outBegIdx, outNBElement,
				outReal);
		assertEquals(RetCode.BadParam.toString(), rb2.toString());

	}

	@Test
	public void rocFloat() {
		/*
		 * Pojebana metoda ale rozgzys³em. A mianowicie formu³a jest prost
		 * bierze ((cene/cena poprzednia)-1)*100 tylko, ¿e trzeba odpowiednio
		 * inTimePeriod ustawic i w tym przypadku nie jest to 100 (liczba
		 * elementów) tylko 1. Liczba od którego ma siê zacz¹c liczenie z
		 * tablicy 0 nie mo¿e byc bo nie ma poprzedniej ceny, musi byc 1.
		 */
		float[] inputsinReal = new float[] { 5.13f, 2.08f, -2.71f, 6.56f,
				5.29f, 3.3f, 6.33f, -2.52f, 1.5f, 4.83f, -2.37f, -2.86f,
				-1.33f, 5.55f, 6.81f, -2.75f, -3.6f, 0.57f, 9.07f, 5.01f,
				0.76f, 7.46f, -1.1f, -2.11f, -0.55f, 5.4f, -4.42f, 7.62f,
				3.73f, 7.23f, 2.79f, 4.63f, 3.53f, 1.42f, -4.22f, 9.9f, 9.76f,
				8.47f, 1.08f, 9f, 0.79f, -4.58f, -1.93f, 8.55f, 7.56f, 4.37f,
				-2.92f, -1.04f, -1.73f, 0.01f, 8.47f, -3.51f, 9.74f, 9.45f,
				2.59f, 6.46f, 5.27f, 5.96f, -3.67f, 3.11f, -3.55f, 9.95f,
				3.41f, 6.57f, 8.57f, 1.89f, 1.53f, 7.22f, 6.5f, 0.28f, 8.45f,
				1.02f, 1.42f, 4.39f, -1.57f, -1.12f, 4.79f, -3.62f, 3.77f,
				2.41f, 3.44f, 4.38f, 0.78f, 8.81f, 5.85f, -1.57f, -3.81f,
				4.59f, -0.53f, 1.86f, 3.76f, 2.6f, 0.59f, -3.23f, 6.78f, 3.97f,
				-0.25f, 3.9f, 1.13f, -0.86f };
		double[] expectedRoc = new double[] { -59.454193424852605,
				-230.28846815140315, -342.0664151453333, -19.35975597567462,
				-37.618147899563844, 91.81818227794216, -139.81042671879084,
				-159.52380997433596, 221.99999491373697, -149.06832138706503,
				20.675106885971537, -53.49650029022879, -517.2932339587996,
				22.702697454823763, -140.3817918224177, 30.9090874411843,
				-115.83333355409128, 1491.2280366031082, -44.76295041398088,
				-84.83034020473731, 881.5789647049523, -114.74530855518725,
				91.81816812389184, -73.9336474281696, -1081.818177877379,
				-181.851851819147, -272.3981844803101, -51.049867780938754,
				93.83377968103557, -61.410789011165704, 65.94982715934599,
				-23.758101854474244, -59.77337199451597, -397.18309279780266,
				-334.5971590221493, -1.4141353034639925, -13.21721241394702,
				-87.24911441715695, 733.3333002196431, -91.22222198380364,
				-679.7468100387197, -57.860262452009145, -543.0052032694476,
				-11.5789500101781, -42.19576827202475, -166.81922546367232,
				-64.38356388082728, 66.34616178168378, -100.57803466278794,
				84600.00456348072, -141.4403763849529, -377.4928717259814,
				-2.977412409320157, -72.59259294767416, 149.42085915932867,
				-18.421053408566323, 13.092980260298791, -161.57718209402879,
				-184.7411397940999, -214.14791228495852, -380.2816885327848,
				-65.72864169650134, 92.66862188541268, 30.44139225124396,
				-77.94632376899226, -19.04761994867189, 371.895419947844,
				-9.972296552830484, -95.6923076739678, 2917.857061889099,
				-87.92899403609313, 39.215684670386295, 209.15492951834494,
				-135.76310023236852, -28.66242246176286, -527.6785662017611,
				-175.57411094756407, -204.1436491742945, -36.074267956934904,
				42.73858650236298, 27.325582604204502, -82.19178194041365,
				1029.4872747135387, -33.5981881271342, -126.83760817173378,
				142.67514748352616, -220.472446759128, -111.54683995143118,
				-450.9434178699683, 102.15053556695648, -30.851066190767963,
				-77.30769248403742, -647.4576546864356, -309.9071259991251,
				-41.44542911861577, -106.29722917376192, -1660.0000381469727,
				-71.02564185642237, -176.1061962773576, };
		double[] expectedRoc2 = new double[] { -59.454193424852605,
				-230.28846815140315, -342.0664151453333, -19.35975597567462,
				-37.618147899563844, 91.81818227794216, -139.81042671879084,
				-159.52380997433596, 221.99999491373697 };

		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		double[] outReal = new double[99];

		RetCode rc = core.roc(0, 99, inputsinReal, 1, outBegIdx, outNBElement,
				outReal);

		assertArrayEquals(expectedRoc, outReal, 0);

		RetCode rb = core.roc(-10, 99, inputsinReal, 1, outBegIdx,
				outNBElement, outReal);
		assertEquals(RetCode.OutOfRangeStartIndex.toString(), rb.toString());

		RetCode rb1 = core.roc(0, -2, inputsinReal, 1, outBegIdx, outNBElement,
				outReal);
		assertEquals(RetCode.OutOfRangeEndIndex.toString(), rb1.toString());

		RetCode rb2 = core.roc(0, 99, inputsinReal, 0, outBegIdx, outNBElement,
				outReal);
		assertEquals(RetCode.BadParam.toString(), rb2.toString());

	}

	@Test
	public void testrocPDouble() {
		/**
		 * taki sam pojebys jak wy¿ej tylko wzór to (cena-cena poprzednia)/cena
		 * poprzednia
		 */
		double[] inputsinReal = new double[] { -3.74899758, 8.79802864,
				-0.14931231, -1.56997335, 8.905047, 2.43794917, -2.57177967,
				1.50790575, 6.28525889, -1.23445402, 9.88264006, -1.54691191,
				-1.51678414, -3.87081489, 4.07341677, -0.83149575, 6.45639026,
				-1.40668908, 8.34046177, 9.20368065, 1.97305676, 5.5028895,
				0.3892627, 6.70370615, 3.56699067, -2.57179387, 7.53523663,
				2.19858521, 5.48588226, 9.68097963, 7.19059048, 8.10866271,
				-4.529799, 6.25455656, -4.83669727, -1.99595817, 3.38484571,
				-1.7680024, 7.80204145, 6.92049361, 4.10760653, 5.48334737,
				2.01051649, -0.5360123, 6.4349846, -2.66170544, 1.19188141,
				7.91933993, -3.36841844, 2.38718663, 2.16506187, -0.2284759,
				9.99706536, -0.61847578, 9.21486081, -4.47503721, 3.76539438,
				9.18354848, 2.41393234, -4.37380726, 3.33243095, 9.37342345,
				2.10308501, 7.85515609, 1.46622299, -2.80063882, -2.75484542,
				-2.71461047, 7.27986801, 4.844885, 4.02320845, 3.95716224,
				8.23032752, 8.35721476, 2.20199541, 8.31864306, -1.95679191,
				5.96352889, 0.25646777, 5.35602973, 0.84101548, -0.48664477,
				3.94578672, 4.57081955, 8.89711142, 0.27538303, 8.15521628,
				-0.00423427, 2.04744304, 3.39087975, 6.80225727, -0.41025659,
				7.66486885, -3.10303327, -2.95132038, 6.28905328, -4.18467174,
				3.64449126, 4.01208808, 6.83494132 };
		double[] expect = new double[] { -3.3467682899918008,
				-1.0169711097917045, 9.514694669180324, -6.672100739799182,
				-0.7262283770091276, -2.054894704798132, -1.5863277354548806,
				3.168204073762568, -1.196404641655103, -9.005676922660918,
				-1.156528205075598, -0.019476073463032553, 1.5519879776696506,
				-2.0523408857714713, -1.2041273449168817, -8.764790451424437,
				-1.2178754727258387, -6.92914375222135, 0.10349773235637068,
				-0.7856230746120032, 1.7890173316656133, -0.9292621267426868,
				16.221547684892492, -0.467907663285629, -1.7209982049097985,
				-3.929953569723689, -0.7082261224223824, 1.495187466488961,
				0.7647078758121212, -0.25724557278094384, 0.12767689003476676,
				-1.5586369987265138, -2.3807580777866746, -1.7733077834697843,
				-0.5873303499104463, -2.6958500237507486, -1.5223288006235296,
				-5.412913381791789, -0.11298938177263845, -0.4064575792592922,
				0.3349251760002436, -0.6333413963522067, -1.2666042793809664,
				-13.005292788990104, -1.4136304288902262, -1.447788621568884,
				5.644402592033045, -1.4253408074124683, -1.708696580464035,
				-0.09304876175517111, -1.1055285778045687, -44.755447992545385,
				-1.0618657333655765, -15.899307471668493, -1.485632642995939,
				-1.8414219152381082, 1.4389340274098992, -0.7371460122133531,
				-2.8119013476574906, -1.7619062185195604, 1.8127884990385175,
				-0.7756332015492162, 2.7350635150977562, -0.8133426028457189,
				-2.9101042877523016, -0.01635105522103703,
				-0.014605157047250905, -3.681735774046433, -0.3344817525063893,
				-0.16959670869380788, -0.01641630326164186, 1.0798559727487944,
				0.015417034096353956, -0.7365156366999954, 2.7777749318741765,
				-1.235229699830395, -4.047605041457883, -0.9569939586559126,
				19.883831640911453, -0.8429778170779496, -1.578639491867617,
				-9.108145742530018, 0.1584051228192081, 0.9465024428715413,
				-0.9690480407628749, 28.614084353709085, -1.0005192100190383,
				-484.54097400496426, 0.6561533990220307, 1.0060449710727726,
				-1.0603118308696373, -19.683109636337594, -1.40483840372559,
				-0.048891802568394704, -3.130928693007568, -1.6653897738961434,
				-1.8709144913717892, 0.10086368542971885, 0.703587055845494 };

		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		double[] outReal = new double[99];

		RetCode rc = core.rocP(0, 99, inputsinReal, 1, outBegIdx, outNBElement,
				outReal);

		assertArrayEquals(expect, outReal, 0);

		RetCode rb = core.rocP(-10, 99, inputsinReal, 1, outBegIdx,
				outNBElement, outReal);
		assertEquals(RetCode.OutOfRangeStartIndex.toString(), rb.toString());

		RetCode rb1 = core.rocP(1000, 99, inputsinReal, 1, outBegIdx,
				outNBElement, outReal);
		assertEquals(RetCode.OutOfRangeEndIndex.toString(), rb1.toString());

		RetCode rb2 = core.rocP(0, 99, inputsinReal, 0, outBegIdx,
				outNBElement, outReal);
		assertEquals(RetCode.BadParam.toString(), rb2.toString());
	}

	@Test
	public void testrocPFloat() {
		/**
		 * taki sam pojebys jak wy¿ej tylko wzór to (cena-cena poprzednia)/cena
		 * poprzednia
		 */
		float[] inputsinReal = new float[] { 5.13f, 2.08f, -2.71f, 6.56f,
				5.29f, 3.3f, 6.33f, -2.52f, 1.5f, 4.83f, -2.37f, -2.86f,
				-1.33f, 5.55f, 6.81f, -2.75f, -3.6f, 0.57f, 9.07f, 5.01f,
				0.76f, 7.46f, -1.1f, -2.11f, -0.55f, 5.4f, -4.42f, 7.62f,
				3.73f, 7.23f, 2.79f, 4.63f, 3.53f, 1.42f, -4.22f, 9.9f, 9.76f,
				8.47f, 1.08f, 9f, 0.79f, -4.58f, -1.93f, 8.55f, 7.56f, 4.37f,
				-2.92f, -1.04f, -1.73f, 0.01f, 8.47f, -3.51f, 9.74f, 9.45f,
				2.59f, 6.46f, 5.27f, 5.96f, -3.67f, 3.11f, -3.55f, 9.95f,
				3.41f, 6.57f, 8.57f, 1.89f, 1.53f, 7.22f, 6.5f, 0.28f, 8.45f,
				1.02f, 1.42f, 4.39f, -1.57f, -1.12f, 4.79f, -3.62f, 3.77f,
				2.41f, 3.44f, 4.38f, 0.78f, 8.81f, 5.85f, -1.57f, -3.81f,
				4.59f, -0.53f, 1.86f, 3.76f, 2.6f, 0.59f, -3.23f, 6.78f, 3.97f,
				-0.25f, 3.9f, 1.13f, -0.86f };
		double[] expect = new double[] { -0.5945419342485261,
				-2.3028846815140316, -3.420664151453333, -0.19359755975674617,
				-0.37618147899563853, 0.9181818227794217, -1.3981042671879083,
				-1.5952380997433595, 2.2199999491373696, -1.49068321387065,
				0.2067510688597153, -0.5349650029022878, -5.172932339587996,
				0.22702697454823761, -1.4038179182241772, 0.309090874411843,
				-1.158333335540913, 14.912280366031082, -0.44762950413980884,
				-0.8483034020473731, 8.815789647049524, -1.1474530855518725,
				0.9181816812389183, -0.7393364742816962, -10.81818177877379,
				-1.8185185181914698, -2.7239818448031006, -0.5104986778093875,
				0.9383377968103557, -0.614107890111657, 0.6594982715934599,
				-0.23758101854474245, -0.5977337199451597, -3.9718309279780266,
				-3.345971590221493, -0.014141353034639956, -0.1321721241394702,
				-0.8724911441715695, 7.333333002196431, -0.9122222198380364,
				-6.797468100387197, -0.5786026245200915, -5.430052032694476,
				-0.11578950010178103, -0.42195768272024753,
				-1.6681922546367232, -0.6438356388082729, 0.6634616178168377,
				-1.0057803466278794, 846.0000456348072, -1.4144037638495293,
				-3.774928717259814, -0.029774124093201595, -0.7259259294767416,
				1.494208591593287, -0.1842105340856633, 0.130929802602988,
				-1.6157718209402876, -1.847411397940999, -2.141479122849585,
				-3.802816885327848, -0.6572864169650133, 0.9266862188541268,
				0.3044139225124397, -0.7794632376899225, -0.19047619948671884,
				3.71895419947844, -0.09972296552830488, -0.956923076739678,
				29.17857061889099, -0.8792899403609313, 0.3921568467038631,
				2.0915492951834493, -1.357631002323685, -0.2866242246176286,
				-5.276785662017611, -1.7557411094756403, -2.041436491742945,
				-0.360742679569349, 0.42738586502362963, 0.2732558260420451,
				-0.8219178194041364, 10.294872747135386, -0.335981881271342,
				-1.2683760817173375, 1.4267514748352614, -2.20472446759128,
				-1.1154683995143118, -4.509434178699683, 1.021505355669565,
				-0.3085106619076796, -0.7730769248403742, -6.474576546864356,
				-3.0990712599912515, -0.41445429118615773, -1.0629722917376192,
				-16.600000381469727, -0.7102564185642238, -1.7610619627735762 };

		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		double[] outReal = new double[99];

		RetCode rc = core.rocP(0, 99, inputsinReal, 1, outBegIdx, outNBElement,
				outReal);

		assertArrayEquals(expect, outReal, 0);

		RetCode rb = core.rocP(-10, 99, inputsinReal, 1, outBegIdx,
				outNBElement, outReal);
		assertEquals(RetCode.OutOfRangeStartIndex.toString(), rb.toString());

		RetCode rb1 = core.rocP(1000, 99, inputsinReal, 1, outBegIdx,
				outNBElement, outReal);
		assertEquals(RetCode.OutOfRangeEndIndex.toString(), rb1.toString());

		RetCode rb2 = core.rocP(0, 99, inputsinReal, 0, outBegIdx,
				outNBElement, outReal);
		assertEquals(RetCode.BadParam.toString(), rb2.toString());
	}

	@Test
	public void testRocRDouble() {
		/**
		 * znów to samo tylko cena/poprzednia cena
		 */
		double[] inputsinReal = new double[] { -3.74899758, 8.79802864,
				-0.14931231, -1.56997335, 8.905047, 2.43794917, -2.57177967,
				1.50790575, 6.28525889, -1.23445402, 9.88264006, -1.54691191,
				-1.51678414, -3.87081489, 4.07341677, -0.83149575, 6.45639026,
				-1.40668908, 8.34046177, 9.20368065, 1.97305676, 5.5028895,
				0.3892627, 6.70370615, 3.56699067, -2.57179387, 7.53523663,
				2.19858521, 5.48588226, 9.68097963, 7.19059048, 8.10866271,
				-4.529799, 6.25455656, -4.83669727, -1.99595817, 3.38484571,
				-1.7680024, 7.80204145, 6.92049361, 4.10760653, 5.48334737,
				2.01051649, -0.5360123, 6.4349846, -2.66170544, 1.19188141,
				7.91933993, -3.36841844, 2.38718663, 2.16506187, -0.2284759,
				9.99706536, -0.61847578, 9.21486081, -4.47503721, 3.76539438,
				9.18354848, 2.41393234, -4.37380726, 3.33243095, 9.37342345,
				2.10308501, 7.85515609, 1.46622299, -2.80063882, -2.75484542,
				-2.71461047, 7.27986801, 4.844885, 4.02320845, 3.95716224,
				8.23032752, 8.35721476, 2.20199541, 8.31864306, -1.95679191,
				5.96352889, 0.25646777, 5.35602973, 0.84101548, -0.48664477,
				3.94578672, 4.57081955, 8.89711142, 0.27538303, 8.15521628,
				-0.00423427, 2.04744304, 3.39087975, 6.80225727, -0.41025659,
				7.66486885, -3.10303327, -2.95132038, 6.28905328, -4.18467174,
				3.64449126, 4.01208808, 6.83494132 };
		double[] expect = new double[] { -2.3467682899918008,
				-0.01697110979170443, 10.514694669180324, -5.672100739799182,
				0.2737716229908725, -1.0548947047981316, -0.5863277354548805,
				4.168204073762568, -0.19640464165510294, -8.005676922660918,
				-0.15652820507559798, 0.9805239265369674, 2.5519879776696506,
				-1.0523408857714711, -0.20412734491688167, -7.764790451424436,
				-0.2178754727258386, -5.92914375222135, 1.1034977323563706,
				0.2143769253879968, 2.789017331665613, 0.07073787325731327,
				17.221547684892492, 0.5320923367143711, -0.7209982049097987,
				-2.9299535697236885, 0.29177387757761764, 2.495187466488961,
				1.7647078758121213, 0.7427544272190562, 1.1276768900347667,
				-0.5586369987265137, -1.3807580777866746, -0.7733077834697845,
				0.41266965008955375, -1.6958500237507483, -0.5223288006235298,
				-4.412913381791789, 0.8870106182273616, 0.5935424207407078,
				1.3349251760002436, 0.36665860364779335, -0.2666042793809664,
				-12.005292788990104, -0.4136304288902261, -0.447788621568884,
				6.644402592033045, -0.4253408074124683, -0.7086965804640352,
				0.9069512382448289, -0.10552857780456869, -43.755447992545385,
				-0.061865733365576395, -14.899307471668493,
				-0.4856326429959391, -0.8414219152381082, 2.4389340274098994,
				0.2628539877866469, -1.8119013476574908, -0.7619062185195604,
				2.8127884990385175, 0.22436679845078372, 3.7350635150977562,
				0.1866573971542811, -1.9101042877523018, 0.9836489447789629,
				0.9853948429527492, -2.6817357740464325, 0.6655182474936108,
				0.8304032913061921, 0.9835836967383581, 2.0798559727487946,
				1.015417034096354, 0.2634843633000045, 3.777774931874177,
				-0.23522969983039518, -3.0476050414578832,
				0.043006041344087455, 20.883831640911453, 0.15702218292205036,
				-0.578639491867617, -8.108145742530018, 1.158405122819208,
				1.9465024428715414, 0.030951959237125074, 29.61408435370909,
				-5.192100190382689E-4, -483.54097400496426, 1.6561533990220307,
				2.0060449710727726, -0.060311830869637185, -18.683109636337594,
				-0.40483840372559016, 0.9511081974316054, -2.1309286930075686,
				-0.6653897738961435, -0.8709144913717892, 1.100863685429719,
				1.703587055845494 };

		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		double[] outReal = new double[99];

		RetCode rc = core.rocR(0, 99, inputsinReal, 1, outBegIdx, outNBElement,
				outReal);
		assertArrayEquals(expect, outReal, 0);

		RetCode rb = core.rocR(-10, 99, inputsinReal, 1, outBegIdx,
				outNBElement, outReal);
		assertEquals(RetCode.OutOfRangeStartIndex.toString(), rb.toString());

		RetCode rb1 = core.rocR(150, 99, inputsinReal, 1, outBegIdx,
				outNBElement, outReal);
		assertEquals(RetCode.OutOfRangeEndIndex.toString(), rb1.toString());

		RetCode rb2 = core.rocR(0, 99, inputsinReal, 0, outBegIdx,
				outNBElement, outReal);
		assertEquals(RetCode.BadParam.toString(), rb2.toString());
	}

	@Test
	public void testRocRFloat() {
		/**
		 * znów to samo tylko cena/poprzednia cena
		 */
		float[] inputsinReal = new float[] { 5.13f, 2.08f, -2.71f, 6.56f,
				5.29f, 3.3f, 6.33f, -2.52f, 1.5f, 4.83f, -2.37f, -2.86f,
				-1.33f, 5.55f, 6.81f, -2.75f, -3.6f, 0.57f, 9.07f, 5.01f,
				0.76f, 7.46f, -1.1f, -2.11f, -0.55f, 5.4f, -4.42f, 7.62f,
				3.73f, 7.23f, 2.79f, 4.63f, 3.53f, 1.42f, -4.22f, 9.9f, 9.76f,
				8.47f, 1.08f, 9f, 0.79f, -4.58f, -1.93f, 8.55f, 7.56f, 4.37f,
				-2.92f, -1.04f, -1.73f, 0.01f, 8.47f, -3.51f, 9.74f, 9.45f,
				2.59f, 6.46f, 5.27f, 5.96f, -3.67f, 3.11f, -3.55f, 9.95f,
				3.41f, 6.57f, 8.57f, 1.89f, 1.53f, 7.22f, 6.5f, 0.28f, 8.45f,
				1.02f, 1.42f, 4.39f, -1.57f, -1.12f, 4.79f, -3.62f, 3.77f,
				2.41f, 3.44f, 4.38f, 0.78f, 8.81f, 5.85f, -1.57f, -3.81f,
				4.59f, -0.53f, 1.86f, 3.76f, 2.6f, 0.59f, -3.23f, 6.78f, 3.97f,
				-0.25f, 3.9f, 1.13f, -0.86f };
		double[] expect = new double[] { 0.405458065751474,
				-1.3028846815140314, -2.420664151453333, 0.8064024402432538,
				0.6238185210043615, 1.9181818227794216, -0.3981042671879082,
				-0.5952380997433594, 3.2199999491373696, -0.49068321387065017,
				1.2067510688597154, 0.4650349970977122, -4.172932339587996,
				1.2270269745482376, -0.4038179182241772, 1.309090874411843,
				-0.15833333554091283, 15.912280366031082, 0.5523704958601912,
				0.15169659795262694, 9.815789647049524, -0.14745308555187253,
				1.9181816812389183, 0.2606635257183038, -9.81818177877379,
				-0.8185185181914697, -1.7239818448031008, 0.4895013221906125,
				1.9383377968103557, 0.38589210988834294, 1.6594982715934599,
				0.7624189814552575, 0.40226628005484033, -2.9718309279780266,
				-2.345971590221493, 0.9858586469653601, 0.8678278758605298,
				0.1275088558284305, 8.333333002196431, 0.08777778016196357,
				-5.797468100387197, 0.4213973754799085, -4.430052032694476,
				0.884210499898219, 0.5780423172797525, -0.6681922546367232,
				0.35616436119172706, 1.6634616178168378,
				-0.0057803466278793176, 847.0000456348072, -0.4144037638495293,
				-2.774928717259814, 0.9702258759067984, 0.2740740705232584,
				2.494208591593287, 0.8157894659143368, 1.130929802602988,
				-0.6157718209402877, -0.847411397940999, -1.141479122849585,
				-2.802816885327848, 0.3427135830349866, 1.9266862188541267,
				1.3044139225124396, 0.2205367623100775, 0.8095238005132811,
				4.71895419947844, 0.9002770344716952, 0.04307692326032198,
				30.17857061889099, 0.12071005963906868, 1.392156846703863,
				3.0915492951834493, -0.3576310023236851, 0.7133757753823714,
				-4.276785662017611, -0.7557411094756404, -1.0414364917429453,
				0.639257320430651, 1.4273858650236297, 1.273255826042045,
				0.17808218059586353, 11.294872747135386, 0.664018118728658,
				-0.2683760817173376, 2.4267514748352617, -1.2047244675912803,
				-0.11546839951431176, -3.5094341786996828, 2.021505355669565,
				0.6914893380923204, 0.22692307515962584, -5.474576546864356,
				-2.0990712599912515, 0.5855457088138423, -0.06297229173761922,
				-15.600000381469727, 0.2897435814357762, -0.7610619627735761, };

		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		double[] outReal = new double[99];

		RetCode rc = core.rocR(0, 99, inputsinReal, 1, outBegIdx, outNBElement,
				outReal);

		assertArrayEquals(expect, outReal, 0);

		RetCode rb = core.rocR(-10, 99, inputsinReal, 1, outBegIdx,
				outNBElement, outReal);
		assertEquals(RetCode.OutOfRangeStartIndex.toString(), rb.toString());

		RetCode rb1 = core.rocR(150, 99, inputsinReal, 1, outBegIdx,
				outNBElement, outReal);
		assertEquals(RetCode.OutOfRangeEndIndex.toString(), rb1.toString());

		RetCode rb2 = core.rocR(0, 99, inputsinReal, 0, outBegIdx,
				outNBElement, outReal);
		assertEquals(RetCode.BadParam.toString(), rb2.toString());
	}

	@Test
	public void testrocR100Double() {
		/**
		 * znów to samo tylko (cena/poprzednia cena)*100
		 */
		double[] inputsinReal = new double[] { -3.74899758, 8.79802864,
				-0.14931231, -1.56997335, 8.905047, 2.43794917, -2.57177967,
				1.50790575, 6.28525889, -1.23445402, 9.88264006, -1.54691191,
				-1.51678414, -3.87081489, 4.07341677, -0.83149575, 6.45639026,
				-1.40668908, 8.34046177, 9.20368065, 1.97305676, 5.5028895,
				0.3892627, 6.70370615, 3.56699067, -2.57179387, 7.53523663,
				2.19858521, 5.48588226, 9.68097963, 7.19059048, 8.10866271,
				-4.529799, 6.25455656, -4.83669727, -1.99595817, 3.38484571,
				-1.7680024, 7.80204145, 6.92049361, 4.10760653, 5.48334737,
				2.01051649, -0.5360123, 6.4349846, -2.66170544, 1.19188141,
				7.91933993, -3.36841844, 2.38718663, 2.16506187, -0.2284759,
				9.99706536, -0.61847578, 9.21486081, -4.47503721, 3.76539438,
				9.18354848, 2.41393234, -4.37380726, 3.33243095, 9.37342345,
				2.10308501, 7.85515609, 1.46622299, -2.80063882, -2.75484542,
				-2.71461047, 7.27986801, 4.844885, 4.02320845, 3.95716224,
				8.23032752, 8.35721476, 2.20199541, 8.31864306, -1.95679191,
				5.96352889, 0.25646777, 5.35602973, 0.84101548, -0.48664477,
				3.94578672, 4.57081955, 8.89711142, 0.27538303, 8.15521628,
				-0.00423427, 2.04744304, 3.39087975, 6.80225727, -0.41025659,
				7.66486885, -3.10303327, -2.95132038, 6.28905328, -4.18467174,
				3.64449126, 4.01208808, 6.83494132 };
		double[] expect = new double[] { -234.6768289991801,
				-1.6971109791704428, 1051.4694669180324, -567.2100739799182,
				27.37716229908725, -105.48947047981316, -58.63277354548805,
				416.8204073762568, -19.640464165510295, -800.5676922660917,
				-15.652820507559797, 98.05239265369674, 255.19879776696507,
				-105.2340885771471, -20.412734491688166, -776.4790451424436,
				-21.78754727258386, -592.914375222135, 110.34977323563706,
				21.43769253879968, 278.9017331665613, 7.0737873257313275,
				1722.1547684892491, 53.209233671437104, -72.09982049097987,
				-292.9953569723688, 29.177387757761764, 249.51874664889607,
				176.47078758121214, 74.27544272190562, 112.76768900347666,
				-55.863699872651374, -138.07580777866747, -77.33077834697845,
				41.266965008955374, -169.58500237507482, -52.23288006235298,
				-441.29133817917887, 88.70106182273616, 59.35424207407078,
				133.49251760002437, 36.665860364779334, -26.660427938096642,
				-1200.5292788990105, -41.36304288902261, -44.7788621568884,
				664.4402592033045, -42.53408074124683, -70.86965804640352,
				90.69512382448289, -10.552857780456868, -4375.544799254539,
				-6.18657333655764, -1489.9307471668494, -48.56326429959391,
				-84.14219152381082, 243.89340274098993, 26.285398778664693,
				-181.19013476574906, -76.19062185195604, 281.2788499038517,
				22.436679845078373, 373.50635150977564, 18.66573971542811,
				-191.01042877523017, 98.36489447789629, 98.53948429527492,
				-268.17357740464325, 66.55182474936107, 83.0403291306192,
				98.35836967383581, 207.98559727487947, 101.5417034096354,
				26.348436330000453, 377.7774931874177, -23.52296998303952,
				-304.76050414578833, 4.300604134408745, 2088.3831640911453,
				15.702218292205036, -57.8639491867617, -810.8145742530019,
				115.84051228192081, 194.65024428715415, 3.0951959237125073,
				2961.408435370909, -0.05192100190382689, -48354.09740049642,
				165.61533990220306, 200.60449710727727, -6.031183086963718,
				-1868.3109636337595, -40.483840372559015, 95.11081974316053,
				-213.09286930075686, -66.53897738961435, -87.09144913717893,
				110.0863685429719, 170.3587055845494 };

		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		double[] outReal = new double[99];

		RetCode rc = core.rocR100(0, 99, inputsinReal, 1, outBegIdx,
				outNBElement, outReal);
		assertArrayEquals(expect, outReal, 0);

		RetCode rb = core.rocR100(-90, 99, inputsinReal, 1, outBegIdx,
				outNBElement, outReal);
		assertEquals(RetCode.OutOfRangeStartIndex.toString(), rb.toString());

		RetCode rb1 = core.rocR100(1230, 99, inputsinReal, 1, outBegIdx,
				outNBElement, outReal);
		assertEquals(RetCode.OutOfRangeEndIndex.toString(), rb1.toString());

		RetCode rb2 = core.rocR100(0, 99, inputsinReal, 0, outBegIdx,
				outNBElement, outReal);
		assertEquals(RetCode.BadParam.toString(), rb2.toString());
	}

	@Test
	public void testrocR100Float() {
		/**
		 * znów to samo tylko (cena/poprzednia cena)*100
		 */
		float[] inputsinReal = new float[] { 5.13f, 2.08f, -2.71f, 6.56f,
				5.29f, 3.3f, 6.33f, -2.52f, 1.5f, 4.83f, -2.37f, -2.86f,
				-1.33f, 5.55f, 6.81f, -2.75f, -3.6f, 0.57f, 9.07f, 5.01f,
				0.76f, 7.46f, -1.1f, -2.11f, -0.55f, 5.4f, -4.42f, 7.62f,
				3.73f, 7.23f, 2.79f, 4.63f, 3.53f, 1.42f, -4.22f, 9.9f, 9.76f,
				8.47f, 1.08f, 9f, 0.79f, -4.58f, -1.93f, 8.55f, 7.56f, 4.37f,
				-2.92f, -1.04f, -1.73f, 0.01f, 8.47f, -3.51f, 9.74f, 9.45f,
				2.59f, 6.46f, 5.27f, 5.96f, -3.67f, 3.11f, -3.55f, 9.95f,
				3.41f, 6.57f, 8.57f, 1.89f, 1.53f, 7.22f, 6.5f, 0.28f, 8.45f,
				1.02f, 1.42f, 4.39f, -1.57f, -1.12f, 4.79f, -3.62f, 3.77f,
				2.41f, 3.44f, 4.38f, 0.78f, 8.81f, 5.85f, -1.57f, -3.81f,
				4.59f, -0.53f, 1.86f, 3.76f, 2.6f, 0.59f, -3.23f, 6.78f, 3.97f,
				-0.25f, 3.9f, 1.13f, -0.86f };
		double[] expect = new double[] { 40.545806575147395,
				-130.28846815140312, -242.06641514533328, 80.64024402432538,
				62.381852100436156, 191.81818227794216, -39.81042671879082,
				-59.52380997433594, 321.99999491373694, -49.06832138706502,
				120.67510688597154, 46.50349970977122, -417.29323395879965,
				122.70269745482376, -40.38179182241772, 130.9090874411843,
				-15.833333554091283, 1591.2280366031082, 55.23704958601912,
				15.169659795262694, 981.5789647049523, -14.745308555187254,
				191.81816812389184, 26.066352571830382, -981.818177877379,
				-81.85185181914697, -172.39818448031008, 48.950132219061246,
				193.83377968103557, 38.589210988834296, 165.949827159346,
				76.24189814552575, 40.22662800548403, -297.18309279780266,
				-234.5971590221493, 98.585864696536, 86.78278758605298,
				12.750885582843049, 833.3333002196431, 8.777778016196356,
				-579.7468100387197, 42.139737547990855, -443.00520326944763,
				88.4210499898219, 57.80423172797525, -66.81922546367231,
				35.616436119172704, 166.34616178168378, -0.5780346627879318,
				84700.00456348072, -41.440376384952934, -277.4928717259814,
				97.02258759067985, 27.407407052325837, 249.42085915932867,
				81.57894659143368, 113.09298026029879, -61.57718209402877,
				-84.7411397940999, -114.14791228495851, -280.2816885327848,
				34.27135830349866, 192.66862188541268, 130.44139225124397,
				22.05367623100775, 80.9523800513281, 471.895419947844,
				90.02770344716951, 4.307692326032198, 3017.857061889099,
				12.071005963906869, 139.2156846703863, 309.15492951834494,
				-35.76310023236851, 71.33757753823714, -427.6785662017611,
				-75.57411094756404, -104.14364917429452, 63.925732043065096,
				142.73858650236298, 127.3255826042045, 17.808218059586352,
				1129.4872747135387, 66.4018118728658, -26.837608171733763,
				242.67514748352616, -120.47244675912803, -11.546839951431176,
				-350.9434178699683, 202.15053556695648, 69.14893380923203,
				22.692307515962582, -547.4576546864356, -209.90712599912516,
				58.55457088138423, -6.297229173761922, -1560.0000381469727,
				28.97435814357762, -76.10619627735761, };

		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		double[] outReal = new double[99];

		RetCode rc = core.rocR100(0, 99, inputsinReal, 1, outBegIdx,
				outNBElement, outReal);

		assertArrayEquals(expect, outReal, 0);

		RetCode rb = core.rocR100(-90, 99, inputsinReal, 1, outBegIdx,
				outNBElement, outReal);
		assertEquals(RetCode.OutOfRangeStartIndex.toString(), rb.toString());

		RetCode rb1 = core.rocR100(1230, 99, inputsinReal, 1, outBegIdx,
				outNBElement, outReal);
		assertEquals(RetCode.OutOfRangeEndIndex.toString(), rb1.toString());

		RetCode rb2 = core.rocR100(0, 99, inputsinReal, 0, outBegIdx,
				outNBElement, outReal);
		assertEquals(RetCode.BadParam.toString(), rb2.toString());
	}

	@Test
	public void testmidPriceDouble() {
		/*
		 * Szuka maksa i minumum w tablicach maks i min (ja u¿y³em tej samej) po
		 * czym (maks+min)/2 rednia z odchyleñ maksymalnych
		 */
		double[] inputsinReal = new double[] { -3.74899758, 8.79802864,
				-0.14931231, -1.56997335, 8.905047, 2.43794917, -2.57177967,
				1.50790575, 6.28525889, -1.23445402, 9.88264006, -1.54691191,
				-1.51678414, -3.87081489, 4.07341677, -0.83149575, 6.45639026,
				-1.40668908, 8.34046177, 9.20368065, 1.97305676, 5.5028895,
				0.3892627, 6.70370615, 3.56699067, -2.57179387, 7.53523663,
				2.19858521, 5.48588226, 9.68097963, 7.19059048, 8.10866271,
				-4.529799, 6.25455656, -4.83669727, -1.99595817, 3.38484571,
				-1.7680024, 7.80204145, 6.92049361, 4.10760653, 5.48334737,
				2.01051649, -0.5360123, 6.4349846, -2.66170544, 1.19188141,
				7.91933993, -3.36841844, 2.38718663, 2.16506187, -0.2284759,
				9.99706536, -0.61847578, 9.21486081, -4.47503721, 3.76539438,
				9.18354848, 2.41393234, -4.37380726, 3.33243095, 9.37342345,
				2.10308501, 7.85515609, 1.46622299, -2.80063882, -2.75484542,
				-2.71461047, 7.27986801, 4.844885, 4.02320845, 3.95716224,
				8.23032752, 8.35721476, 2.20199541, 8.31864306, -1.95679191,
				5.96352889, 0.25646777, 5.35602973, 0.84101548, -0.48664477,
				3.94578672, 4.57081955, 8.89711142, 0.27538303, 8.15521628,
				-0.00423427, 2.04744304, 3.39087975, 6.80225727, -0.41025659,
				7.66486885, -3.10303327, -2.95132038, 6.28905328, -4.18467174,
				3.64449126, 4.01208808, 6.83494132 };

		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		double[] outReal = new double[1];
		double[] expect = new double[] { 2.580184045 };
		double[] expect2 = new double[] { 3.005912585 };
		int minvalue = Integer.MIN_VALUE;

		RetCode rc = core.midPrice(0, 99, inputsinReal, inputsinReal, 100,
				outBegIdx, outNBElement, outReal);
		assertArrayEquals(expect, outReal, 0);

		RetCode rmin = core.midPrice(0, 13, inputsinReal, inputsinReal,
				minvalue, outBegIdx, outNBElement, outReal);
		assertArrayEquals(expect2, outReal, 0);

		RetCode rb = core.midPrice(-1, 99, inputsinReal, inputsinReal, 100,
				outBegIdx, outNBElement, outReal);
		assertEquals(RetCode.OutOfRangeStartIndex.toString(), rb.toString());

		RetCode rb1 = core.midPrice(5, 4, inputsinReal, inputsinReal, 100,
				outBegIdx, outNBElement, outReal);
		assertEquals(RetCode.OutOfRangeEndIndex.toString(), rb1.toString());

		RetCode rb2 = core.midPrice(0, 99, inputsinReal, inputsinReal, 1,
				outBegIdx, outNBElement, outReal);
		assertEquals(RetCode.BadParam.toString(), rb2.toString());

	}

	@Test
	public void testmidPriceFloat() {
		/*
		 * Szuka maksa i minumum w tablicach maks i min (ja u¿y³em tej samej) po
		 * czym (maks+min)/2 rednia z odchyleñ maksymalnych
		 */
		float[] inputsinReal = new float[] { 5.13f, 2.08f, -2.71f, 6.56f,
				5.29f, 3.3f, 6.33f, -2.52f, 1.5f, 4.83f, -2.37f, -2.86f,
				-1.33f, 5.55f, 6.81f, -2.75f, -3.6f, 0.57f, 9.07f, 5.01f,
				0.76f, 7.46f, -1.1f, -2.11f, -0.55f, 5.4f, -4.42f, 7.62f,
				3.73f, 7.23f, 2.79f, 4.63f, 3.53f, 1.42f, -4.22f, 9.9f, 9.76f,
				8.47f, 1.08f, 9f, 0.79f, -4.58f, -1.93f, 8.55f, 7.56f, 4.37f,
				-2.92f, -1.04f, -1.73f, 0.01f, 8.47f, -3.51f, 9.74f, 9.45f,
				2.59f, 6.46f, 5.27f, 5.96f, -3.67f, 3.11f, -3.55f, 9.95f,
				3.41f, 6.57f, 8.57f, 1.89f, 1.53f, 7.22f, 6.5f, 0.28f, 8.45f,
				1.02f, 1.42f, 4.39f, -1.57f, -1.12f, 4.79f, -3.62f, 3.77f,
				2.41f, 3.44f, 4.38f, 0.78f, 8.81f, 5.85f, -1.57f, -3.81f,
				4.59f, -0.53f, 1.86f, 3.76f, 2.6f, 0.59f, -3.23f, 6.78f, 3.97f,
				-0.25f, 3.9f, 1.13f, -0.86f };

		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		double[] outReal = new double[1];
		double[] expect = new double[] { 2.684999942779541 };
		double[] expect2 = new double[] { 1.850000023841858 };
		int minvalue = Integer.MIN_VALUE;

		RetCode rc = core.midPrice(0, 99, inputsinReal, inputsinReal, 100,
				outBegIdx, outNBElement, outReal);
		assertArrayEquals(expect, outReal, 0);

		RetCode rmin = core.midPrice(0, 13, inputsinReal, inputsinReal,
				minvalue, outBegIdx, outNBElement, outReal);
		assertArrayEquals(expect2, outReal, 0);

		RetCode rb = core.midPrice(-1, 99, inputsinReal, inputsinReal, 100,
				outBegIdx, outNBElement, outReal);
		assertEquals(RetCode.OutOfRangeStartIndex.toString(), rb.toString());

		RetCode rb1 = core.midPrice(5, 4, inputsinReal, inputsinReal, 100,
				outBegIdx, outNBElement, outReal);
		assertEquals(RetCode.OutOfRangeEndIndex.toString(), rb1.toString());

		RetCode rb2 = core.midPrice(0, 99, inputsinReal, inputsinReal, 1,
				outBegIdx, outNBElement, outReal);
		assertEquals(RetCode.BadParam.toString(), rb2.toString());

	}

	@Test
	public void testmidPointDouble() {
		/*
		 * Szuka maksa i minumum w tablicach maks i min (ja u¿y³em tej samej) po
		 * czym (maks+min)/2 rednia z odchyleñ maksymalnych
		 */
		double[] inputsinReal = new double[] { -3.74899758, 8.79802864,
				-0.14931231, -1.56997335, 8.905047, 2.43794917, -2.57177967,
				1.50790575, 6.28525889, -1.23445402, 9.88264006, -1.54691191,
				-1.51678414, -3.87081489, 4.07341677, -0.83149575, 6.45639026,
				-1.40668908, 8.34046177, 9.20368065, 1.97305676, 5.5028895,
				0.3892627, 6.70370615, 3.56699067, -2.57179387, 7.53523663,
				2.19858521, 5.48588226, 9.68097963, 7.19059048, 8.10866271,
				-4.529799, 6.25455656, -4.83669727, -1.99595817, 3.38484571,
				-1.7680024, 7.80204145, 6.92049361, 4.10760653, 5.48334737,
				2.01051649, -0.5360123, 6.4349846, -2.66170544, 1.19188141,
				7.91933993, -3.36841844, 2.38718663, 2.16506187, -0.2284759,
				9.99706536, -0.61847578, 9.21486081, -4.47503721, 3.76539438,
				9.18354848, 2.41393234, -4.37380726, 3.33243095, 9.37342345,
				2.10308501, 7.85515609, 1.46622299, -2.80063882, -2.75484542,
				-2.71461047, 7.27986801, 4.844885, 4.02320845, 3.95716224,
				8.23032752, 8.35721476, 2.20199541, 8.31864306, -1.95679191,
				5.96352889, 0.25646777, 5.35602973, 0.84101548, -0.48664477,
				3.94578672, 4.57081955, 8.89711142, 0.27538303, 8.15521628,
				-0.00423427, 2.04744304, 3.39087975, 6.80225727, -0.41025659,
				7.66486885, -3.10303327, -2.95132038, 6.28905328, -4.18467174,
				3.64449126, 4.01208808, 6.83494132 };

		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		double[] outReal = new double[1];
		double[] expect = new double[] { 2.580184045 };
		double[] expect2 = new double[] { 3.005912585 };
		int minvalue = Integer.MIN_VALUE;

		RetCode rc = core.midPoint(0, 99, inputsinReal, 100, outBegIdx,
				outNBElement, outReal);
		assertArrayEquals(expect, outReal, 0);

		RetCode rmin = core.midPoint(0, 13, inputsinReal, minvalue, outBegIdx,
				outNBElement, outReal);
		assertArrayEquals(expect2, outReal, 0);

		RetCode rb = core.midPoint(-1, 99, inputsinReal, 100, outBegIdx,
				outNBElement, outReal);
		assertEquals(RetCode.OutOfRangeStartIndex.toString(), rb.toString());

		RetCode rb1 = core.midPoint(5, 4, inputsinReal, 100, outBegIdx,
				outNBElement, outReal);
		assertEquals(RetCode.OutOfRangeEndIndex.toString(), rb1.toString());

		RetCode rb2 = core.midPoint(0, 99, inputsinReal, 1, outBegIdx,
				outNBElement, outReal);
		assertEquals(RetCode.BadParam.toString(), rb2.toString());

	}

	@Test
	public void testmidPointFloat() {
		/*
		 * Szuka maksa i minumum w tablicach maks i min (ja u¿y³em tej samej) po
		 * czym (maks+min)/2 rednia z odchyleñ maksymalnych
		 */
		float[] inputsinReal = new float[] { 5.13f, 2.08f, -2.71f, 6.56f,
				5.29f, 3.3f, 6.33f, -2.52f, 1.5f, 4.83f, -2.37f, -2.86f,
				-1.33f, 5.55f, 6.81f, -2.75f, -3.6f, 0.57f, 9.07f, 5.01f,
				0.76f, 7.46f, -1.1f, -2.11f, -0.55f, 5.4f, -4.42f, 7.62f,
				3.73f, 7.23f, 2.79f, 4.63f, 3.53f, 1.42f, -4.22f, 9.9f, 9.76f,
				8.47f, 1.08f, 9f, 0.79f, -4.58f, -1.93f, 8.55f, 7.56f, 4.37f,
				-2.92f, -1.04f, -1.73f, 0.01f, 8.47f, -3.51f, 9.74f, 9.45f,
				2.59f, 6.46f, 5.27f, 5.96f, -3.67f, 3.11f, -3.55f, 9.95f,
				3.41f, 6.57f, 8.57f, 1.89f, 1.53f, 7.22f, 6.5f, 0.28f, 8.45f,
				1.02f, 1.42f, 4.39f, -1.57f, -1.12f, 4.79f, -3.62f, 3.77f,
				2.41f, 3.44f, 4.38f, 0.78f, 8.81f, 5.85f, -1.57f, -3.81f,
				4.59f, -0.53f, 1.86f, 3.76f, 2.6f, 0.59f, -3.23f, 6.78f, 3.97f,
				-0.25f, 3.9f, 1.13f, -0.86f };

		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		double[] outReal = new double[1];
		double[] expect = new double[] { 2.684999942779541 };
		double[] expect2 = new double[] { 1.850000023841858 };
		int minvalue = Integer.MIN_VALUE;

		RetCode rc = core.midPoint(0, 99, inputsinReal, 100, outBegIdx,
				outNBElement, outReal);
		assertArrayEquals(expect, outReal, 0);
		RetCode rmin = core.midPoint(0, 13, inputsinReal, minvalue, outBegIdx,
				outNBElement, outReal);
		assertArrayEquals(expect2, outReal, 0);

		RetCode rb = core.midPoint(-1, 99, inputsinReal, 100, outBegIdx,
				outNBElement, outReal);
		assertEquals(RetCode.OutOfRangeStartIndex.toString(), rb.toString());

		RetCode rb1 = core.midPoint(5, 4, inputsinReal, 100, outBegIdx,
				outNBElement, outReal);
		assertEquals(RetCode.OutOfRangeEndIndex.toString(), rb1.toString());

		RetCode rb2 = core.midPoint(0, 99, inputsinReal, 1, outBegIdx,
				outNBElement, outReal);
		assertEquals(RetCode.BadParam.toString(), rb2.toString());

	}

	@Test
	public void testmomDouble() {
		/**
		 * momentum czyli cena-poprzednia cena taki sam pojebus jak roc i ca³a
		 * reszta roc
		 */
		double[] inputsinReal = new double[] { -3.74899758, 8.79802864,
				-0.14931231, -1.56997335, 8.905047, 2.43794917, -2.57177967,
				1.50790575, 6.28525889, -1.23445402, 9.88264006, -1.54691191,
				-1.51678414, -3.87081489, 4.07341677, -0.83149575, 6.45639026,
				-1.40668908, 8.34046177, 9.20368065, 1.97305676, 5.5028895,
				0.3892627, 6.70370615, 3.56699067, -2.57179387, 7.53523663,
				2.19858521, 5.48588226, 9.68097963, 7.19059048, 8.10866271,
				-4.529799, 6.25455656, -4.83669727, -1.99595817, 3.38484571,
				-1.7680024, 7.80204145, 6.92049361, 4.10760653, 5.48334737,
				2.01051649, -0.5360123, 6.4349846, -2.66170544, 1.19188141,
				7.91933993, -3.36841844, 2.38718663, 2.16506187, -0.2284759,
				9.99706536, -0.61847578, 9.21486081, -4.47503721, 3.76539438,
				9.18354848, 2.41393234, -4.37380726, 3.33243095, 9.37342345,
				2.10308501, 7.85515609, 1.46622299, -2.80063882, -2.75484542,
				-2.71461047, 7.27986801, 4.844885, 4.02320845, 3.95716224,
				8.23032752, 8.35721476, 2.20199541, 8.31864306, -1.95679191,
				5.96352889, 0.25646777, 5.35602973, 0.84101548, -0.48664477,
				3.94578672, 4.57081955, 8.89711142, 0.27538303, 8.15521628,
				-0.00423427, 2.04744304, 3.39087975, 6.80225727, -0.41025659,
				7.66486885, -3.10303327, -2.95132038, 6.28905328, -4.18467174,
				3.64449126, 4.01208808, 6.83494132 };
		double[] expect = new double[] { 12.54702622, -8.947340950000001,
				-1.42066104, 10.47502035, -6.46709783, -5.00972884,
				4.079685420000001, 4.77735314, -7.51971291, 11.11709408,
				-11.42955197, 0.030127769999999998, -2.35403075, 7.94423166,
				-4.90491252, 7.28788601, -7.8630793400000005,
				9.747150849999999, 0.8632188800000016, -7.23062389,
				3.5298327400000002, -5.1136268000000005, 6.314443450000001,
				-3.1367154800000003, -6.13878454, 10.1070305, -5.33665142,
				3.2872970500000003, 4.195097369999999, -2.4903891499999995,
				0.9180722300000008, -12.638461710000001, 10.78435556,
				-11.09125383, 2.8407391000000004, 5.38080388, -5.15284811,
				9.57004385, -0.8815478399999996, -2.8128870800000003,
				1.3757408399999997, -3.4728308799999996, -2.54652879,
				6.9709969, -9.09669004, 3.85358685, 6.72745852,
				-11.287758369999999, 5.75560507, -0.2221247599999998,
				-2.39353777, 10.22554126, -10.615541140000001, 9.83333659,
				-13.68989802, 8.24043159, 5.418154100000001, -6.76961614,
				-6.7877396, 7.70623821, 6.040992500000001, -7.270338440000001,
				5.75207108, -6.388933100000001, -4.26686181,
				0.045793399999999984, 0.04023494999999988, 9.994478480000001,
				-2.4349830100000007, -0.8216765499999994, -0.0660462100000001,
				4.273165279999999, 0.1268872400000003, -6.155219349999999,
				6.116647649999999, -10.27543497, 7.9203208,
				-5.7070611200000005, 5.099561960000001, -4.51501425,
				-1.32766025, 4.43243149, 0.6250328300000003,
				4.3262918699999995, -8.62172839, 7.879833249999999,
				-8.159450549999999, 2.05167731, 1.3434367099999998,
				3.4113775200000003, -7.2125138600000005, 8.07512544,
				-10.76790212, 0.1517128900000002, 9.24037366, -10.47372502,
				7.829162999999999, 0.3675968199999997, 2.8228532400000006 };

		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		double[] outReal = new double[99];

		RetCode rc = core.mom(0, 99, inputsinReal, 1, outBegIdx, outNBElement,
				outReal);
		assertArrayEquals(expect, outReal, 0);

		RetCode rb = core.mom(-90, 99, inputsinReal, 1, outBegIdx,
				outNBElement, outReal);
		assertEquals(RetCode.OutOfRangeStartIndex.toString(), rb.toString());

		RetCode rb1 = core.mom(1230, 99, inputsinReal, 1, outBegIdx,
				outNBElement, outReal);
		assertEquals(RetCode.OutOfRangeEndIndex.toString(), rb1.toString());

		RetCode rb2 = core.mom(0, 99, inputsinReal, 0, outBegIdx, outNBElement,
				outReal);
		assertEquals(RetCode.BadParam.toString(), rb2.toString());
	}

	@Test
	public void testmomFloat() {
		/**
		 * momentum czyli cena-poprzednia cena taki sam pojebus jak roc i ca³a
		 * reszta roc
		 */
		float[] inputsinReal = new float[] { 5.13f, 2.08f, -2.71f, 6.56f,
				5.29f, 3.3f, 6.33f, -2.52f, 1.5f, 4.83f, -2.37f, -2.86f,
				-1.33f, 5.55f, 6.81f, -2.75f, -3.6f, 0.57f, 9.07f, 5.01f,
				0.76f, 7.46f, -1.1f, -2.11f, -0.55f, 5.4f, -4.42f, 7.62f,
				3.73f, 7.23f, 2.79f, 4.63f, 3.53f, 1.42f, -4.22f, 9.9f, 9.76f,
				8.47f, 1.08f, 9f, 0.79f, -4.58f, -1.93f, 8.55f, 7.56f, 4.37f,
				-2.92f, -1.04f, -1.73f, 0.01f, 8.47f, -3.51f, 9.74f, 9.45f,
				2.59f, 6.46f, 5.27f, 5.96f, -3.67f, 3.11f, -3.55f, 9.95f,
				3.41f, 6.57f, 8.57f, 1.89f, 1.53f, 7.22f, 6.5f, 0.28f, 8.45f,
				1.02f, 1.42f, 4.39f, -1.57f, -1.12f, 4.79f, -3.62f, 3.77f,
				2.41f, 3.44f, 4.38f, 0.78f, 8.81f, 5.85f, -1.57f, -3.81f,
				4.59f, -0.53f, 1.86f, 3.76f, 2.6f, 0.59f, -3.23f, 6.78f, 3.97f,
				-0.25f, 3.9f, 1.13f, -0.86f };
		double[] expect = new double[] { -3.0500001907348633,
				-4.789999961853027, 9.270000457763672, -1.2699999809265137,
				-1.9900000095367432, 3.0299999713897705, -8.850000381469727,
				4.019999980926514, 3.3299999237060547, -7.199999809265137,
				-0.49000000953674316, 1.529999852180481, 6.880000114440918,
				1.2599997520446777, -9.559999465942383, -0.8499999046325684,
				4.170000076293945, 8.5, -4.059999465942383, -4.25,
				6.699999809265137, -8.5600004196167, -1.0099998712539673,
				1.559999942779541, 5.950000286102295, -9.819999694824219,
				12.039999961853027, -3.8899998664855957, 3.5,
				-4.440000057220459, 1.8400001525878906, -1.1000001430511475,
				-2.1100001335144043, -5.639999866485596, 14.119998931884766,
				-0.1399993896484375, -1.2899999618530273, -7.390000343322754,
				7.920000076293945, -8.210000038146973, -5.369999885559082,
				2.6500000953674316, 10.480000495910645, -0.9900002479553223,
				-3.190000057220459, -7.289999961853027, 1.880000114440918,
				-0.690000057220459, 1.7400000095367432, 8.460000038146973,
				-11.980000495910645, 13.25, -0.28999996185302734,
				-6.859999656677246, 3.870000123977661, -1.190000057220459,
				0.690000057220459, -9.630000114440918, 6.779999732971191,
				-6.659999847412109, 13.5, -6.539999961853027,
				3.1600000858306885, 1.9999995231628418, -6.679999828338623,
				-0.36000001430511475, 5.689999580383301, -0.7199997901916504,
				-6.21999979019165, 8.170000076293945, -7.429999828338623,
				0.3999999761581421, 2.9699997901916504, -5.960000038146973,
				0.4500000476837158, 5.909999847412109, -8.40999984741211,
				7.389999866485596, -1.3599998950958252, 1.0299999713897705,
				0.940000057220459, -3.6000001430511475, 8.030000686645508,
				-2.960000514984131, -7.420000076293945, -2.239999771118164,
				8.399999618530273, -5.119999885559082, 2.3899998664855957,
				1.899999976158142, -1.1600000858306885, -2.009999990463257,
				-3.819999933242798, 10.010000228881836, -2.81000018119812,
				-4.220000267028809, 4.150000095367432, -2.7699999809265137,
				-1.9900000095367432 };

		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		double[] outReal = new double[99];

		RetCode rc = core.mom(0, 99, inputsinReal, 1, outBegIdx, outNBElement,
				outReal);

		assertArrayEquals(expect, outReal, 0);

		RetCode rb = core.mom(-90, 99, inputsinReal, 1, outBegIdx,
				outNBElement, outReal);
		assertEquals(RetCode.OutOfRangeStartIndex.toString(), rb.toString());

		RetCode rb1 = core.mom(1230, 99, inputsinReal, 1, outBegIdx,
				outNBElement, outReal);
		assertEquals(RetCode.OutOfRangeEndIndex.toString(), rb1.toString());

		RetCode rb2 = core.mom(0, 99, inputsinReal, 0, outBegIdx, outNBElement,
				outReal);
		assertEquals(RetCode.BadParam.toString(), rb2.toString());
	}

	@Test
	public void movingAveLookback() {

		int sma = 29;
		int ema = 29;
		int wma = 29;
		int dema = ema * 2;
		int tema = ema * 3;
		int trima = 29;
		int kama = 30;
		int mama = 30;
		int t3 = 30;
		int def = 0;
		int minvaluesma = 29;
		int err = -1;

		int i = core.movingAverageLookback(Integer.MIN_VALUE, MAType.Sma);
		assertEquals(minvaluesma, i);

		i = core.movingAverageLookback(Integer.MAX_VALUE, MAType.Sma);
		assertEquals(err, i);

		i = core.movingAverageLookback(1, MAType.Sma);
		assertEquals(def, i);

		i = core.movingAverageLookback(30, MAType.Sma);
		assertEquals(sma, i);

		i = core.movingAverageLookback(30, MAType.Ema);
		assertEquals(ema, i);

		i = core.movingAverageLookback(30, MAType.Wma);
		assertEquals(wma, i);

		i = core.movingAverageLookback(30, MAType.Dema);
		assertEquals(dema, i);

		i = core.movingAverageLookback(30, MAType.Tema);
		assertEquals(tema, i);

		i = core.movingAverageLookback(30, MAType.Trima);
		assertEquals(trima, i);

		i = core.movingAverageLookback(30, MAType.Kama);
		assertEquals(kama, i);

		i = core.movingAverageLookback(30, MAType.Kama);
		assertEquals(mama, i);

		i = core.movingAverageLookback(30, MAType.Kama);
		assertEquals(t3, i);

	}

	@Test
	public void testTrueRangeDouble() {

		double[] inputsinReal = new double[] { -3.74899758, 8.79802864,
				-0.14931231, -1.56997335, 8.905047, 2.43794917, -2.57177967,
				1.50790575, 6.28525889, -1.23445402, 9.88264006, -1.54691191,
				-1.51678414, -3.87081489, 4.07341677, -0.83149575, 6.45639026,
				-1.40668908, 8.34046177, 9.20368065, 1.97305676, 5.5028895,
				0.3892627, 6.70370615, 3.56699067, -2.57179387, 7.53523663,
				2.19858521, 5.48588226, 9.68097963, 7.19059048, 8.10866271,
				-4.529799, 6.25455656, -4.83669727, -1.99595817, 3.38484571,
				-1.7680024, 7.80204145, 6.92049361, 4.10760653, 5.48334737,
				2.01051649, -0.5360123, 6.4349846, -2.66170544, 1.19188141,
				7.91933993, -3.36841844, 2.38718663, 2.16506187, -0.2284759,
				9.99706536, -0.61847578, 9.21486081, -4.47503721, 3.76539438,
				9.18354848, 2.41393234, -4.37380726, 3.33243095, 9.37342345,
				2.10308501, 7.85515609, 1.46622299, -2.80063882, -2.75484542,
				-2.71461047, 7.27986801, 4.844885, 4.02320845, 3.95716224,
				8.23032752, 8.35721476, 2.20199541, 8.31864306, -1.95679191,
				5.96352889, 0.25646777, 5.35602973, 0.84101548, -0.48664477,
				3.94578672, 4.57081955, 8.89711142, 0.27538303, 8.15521628,
				-0.00423427, 2.04744304, 3.39087975, 6.80225727, -0.41025659,
				7.66486885, -3.10303327, -2.95132038, 6.28905328, -4.18467174,
				3.64449126, 4.01208808, 6.83494132 };
		double[] expect = new double[] { 12.54702622, 8.947340950000001,
				1.42066104, 10.47502035, 6.46709783, 5.00972884,
				4.079685420000001, 4.77735314, 7.51971291, 11.11709408,
				11.42955197, 0.030127769999999998, 2.35403075, 7.94423166,
				4.90491252, 7.28788601, 7.8630793400000005, 9.747150849999999,
				0.8632188800000016, 7.23062389, 3.5298327400000002,
				5.1136268000000005, 6.314443450000001, 3.1367154800000003,
				6.13878454, 10.1070305, 5.33665142, 3.2872970500000003,
				4.195097369999999, 2.4903891499999995, 0.9180722300000008,
				12.638461710000001, 10.78435556, 11.09125383,
				2.8407391000000004, 5.38080388, 5.15284811, 9.57004385,
				0.8815478399999996, 2.8128870800000003, 1.3757408399999997,
				3.4728308799999996, 2.54652879, 6.9709969, 9.09669004,
				3.85358685, 6.72745852, 11.287758369999999, 5.75560507,
				0.2221247599999998, 2.39353777, 10.22554126,
				10.615541140000001, 9.83333659, 13.68989802, 8.24043159,
				5.418154100000001, 6.76961614, 6.7877396, 7.70623821,
				6.040992500000001, 7.270338440000001, 5.75207108,
				6.388933100000001, 4.26686181, 0.045793399999999984,
				0.04023494999999988, 9.994478480000001, 2.4349830100000007,
				0.8216765499999994, 0.0660462100000001, 4.273165279999999,
				0.1268872400000003, 6.155219349999999, 6.116647649999999,
				10.27543497, 7.9203208, 5.7070611200000005, 5.099561960000001,
				4.51501425, 1.32766025, 4.43243149, 0.6250328300000003,
				4.3262918699999995, 8.62172839, 7.879833249999999,
				8.159450549999999, 2.05167731, 1.3434367099999998,
				3.4113775200000003, 7.2125138600000005, 8.07512544,
				10.76790212, 0.1517128900000002, 9.24037366, 10.47372502,
				7.829162999999999, 0.3675968199999997, 2.8228532400000006, };

		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		double[] outReal = new double[99];

		RetCode rc = core.trueRange(0, 99, inputsinReal, inputsinReal,
				inputsinReal, outBegIdx, outNBElement, outReal);
		assertArrayEquals(expect, outReal, 0);

		RetCode rb = core.trueRange(-90, 99, inputsinReal, inputsinReal,
				inputsinReal, outBegIdx, outNBElement, outReal);
		assertEquals(RetCode.OutOfRangeStartIndex.toString(), rb.toString());

		RetCode rb1 = core.trueRange(1230, 99, inputsinReal, inputsinReal,
				inputsinReal, outBegIdx, outNBElement, outReal);
		assertEquals(RetCode.OutOfRangeEndIndex.toString(), rb1.toString());

	}

	@Test
	public void testTrueRangeFloat() {

		float[] inputsinReal = new float[] { 5.13f, 2.08f, -2.71f, 6.56f,
				5.29f, 3.3f, 6.33f, -2.52f, 1.5f, 4.83f, -2.37f, -2.86f,
				-1.33f, 5.55f, 6.81f, -2.75f, -3.6f, 0.57f, 9.07f, 5.01f,
				0.76f, 7.46f, -1.1f, -2.11f, -0.55f, 5.4f, -4.42f, 7.62f,
				3.73f, 7.23f, 2.79f, 4.63f, 3.53f, 1.42f, -4.22f, 9.9f, 9.76f,
				8.47f, 1.08f, 9f, 0.79f, -4.58f, -1.93f, 8.55f, 7.56f, 4.37f,
				-2.92f, -1.04f, -1.73f, 0.01f, 8.47f, -3.51f, 9.74f, 9.45f,
				2.59f, 6.46f, 5.27f, 5.96f, -3.67f, 3.11f, -3.55f, 9.95f,
				3.41f, 6.57f, 8.57f, 1.89f, 1.53f, 7.22f, 6.5f, 0.28f, 8.45f,
				1.02f, 1.42f, 4.39f, -1.57f, -1.12f, 4.79f, -3.62f, 3.77f,
				2.41f, 3.44f, 4.38f, 0.78f, 8.81f, 5.85f, -1.57f, -3.81f,
				4.59f, -0.53f, 1.86f, 3.76f, 2.6f, 0.59f, -3.23f, 6.78f, 3.97f,
				-0.25f, 3.9f, 1.13f, -0.86f };

		double[] expect = new double[] { 3.0500001907348633, 4.789999961853027,
				9.269999980926514, 1.2699999809265137, 1.9900000095367432,
				3.0299999713897705, 8.849999904632568, 4.019999980926514,
				3.3299999237060547, 7.199999809265137, 0.49000000953674316,
				1.529999852180481, 6.8800002336502075, 1.2599997520446777,
				9.559999942779541, 0.8499999046325684, 4.169999897480011,
				8.499999701976776, 4.059999465942383, 4.250000238418579,
				6.700000047683716, 8.56000006198883, 1.0099998712539673,
				1.5599998831748962, 5.950000107288361, 9.820000171661377,
				12.039999961853027, 3.8899998664855957, 3.5, 4.440000057220459,
				1.8400001525878906, 1.1000001430511475, 2.1100000143051147,
				5.639999747276306, 14.119999408721924, 0.1399993896484375,
				1.2899999618530273, 7.390000224113464, 7.919999957084656,
				8.209999978542328, 5.369999945163727, 2.649999976158142,
				10.480000138282776, 0.9900002479553223, 3.190000057220459,
				7.289999961853027, 1.880000114440918, 0.690000057220459,
				1.740000018849969, 8.460000267252326, 11.980000257492065,
				13.249999761581421, 0.28999996185302734, 6.859999895095825,
				3.870000123977661, 1.190000057220459, 0.690000057220459,
				9.630000114440918, 6.7799999713897705, 6.659999847412109,
				13.499999761581421, 6.539999723434448, 3.1600000858306885,
				1.9999995231628418, 6.6799997091293335, 0.36000001430511475,
				5.68999981880188, 0.7199997901916504, 6.219999998807907,
				8.169999808073044, 7.429999828338623, 0.3999999761581421,
				2.96999990940094, 5.959999918937683, 0.4500000476837158,
				5.909999966621399, 8.40999984741211, 7.389999866485596,
				1.3599998950958252, 1.0299999713897705, 0.940000057220459,
				3.6000001430511475, 8.030000448226929, 2.960000514984131,
				7.419999957084656, 2.2399998903274536, 8.400000095367432,
				5.120000123977661, 2.3899999856948853, 1.899999976158142,
				1.1600000858306885, 2.009999930858612, 3.8199999928474426,
				10.010000228881836, 2.81000018119812, 4.2200000286102295,
				4.150000095367432, 2.7700001001358032, 1.9900000095367432 };

		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		double[] outReal = new double[99];

		RetCode rc = core.trueRange(0, 99, inputsinReal, inputsinReal,
				inputsinReal, outBegIdx, outNBElement, outReal);
		assertArrayEquals(expect, outReal, 0);

		RetCode rb = core.trueRange(-90, 99, inputsinReal, inputsinReal,
				inputsinReal, outBegIdx, outNBElement, outReal);
		assertEquals(RetCode.OutOfRangeStartIndex.toString(), rb.toString());

		RetCode rb1 = core.trueRange(1230, 99, inputsinReal, inputsinReal,
				inputsinReal, outBegIdx, outNBElement, outReal);
		assertEquals(RetCode.OutOfRangeEndIndex.toString(), rb1.toString());

	}

	@Test
	public void testTsfDouble() {

		double[] inputsinReal = new double[] { -3.74899758, 8.79802864,
				-0.14931231, -1.56997335, 8.905047, 2.43794917, -2.57177967,
				1.50790575, 6.28525889, -1.23445402, 9.88264006, -1.54691191,
				-1.51678414, -3.87081489, 4.07341677, -0.83149575, 6.45639026,
				-1.40668908, 8.34046177, 9.20368065, 1.97305676, 5.5028895,
				0.3892627, 6.70370615, 3.56699067, -2.57179387, 7.53523663,
				2.19858521, 5.48588226, 9.68097963, 7.19059048, 8.10866271,
				-4.529799, 6.25455656, -4.83669727, -1.99595817, 3.38484571,
				-1.7680024, 7.80204145, 6.92049361, 4.10760653, 5.48334737,
				2.01051649, -0.5360123, 6.4349846, -2.66170544, 1.19188141,
				7.91933993, -3.36841844, 2.38718663, 2.16506187, -0.2284759,
				9.99706536, -0.61847578, 9.21486081, -4.47503721, 3.76539438,
				9.18354848, 2.41393234, -4.37380726, 3.33243095, 9.37342345,
				2.10308501, 7.85515609, 1.46622299, -2.80063882, -2.75484542,
				-2.71461047, 7.27986801, 4.844885, 4.02320845, 3.95716224,
				8.23032752, 8.35721476, 2.20199541, 8.31864306, -1.95679191,
				5.96352889, 0.25646777, 5.35602973, 0.84101548, -0.48664477,
				3.94578672, 4.57081955, 8.89711142, 0.27538303, 8.15521628,
				-0.00423427, 2.04744304, 3.39087975, 6.80225727, -0.41025659,
				7.66486885, -3.10303327, -2.95132038, 6.28905328, -4.18467174,
				3.64449126, 4.01208808, 6.83494132 };
		double[] expect = new double[] { 3.2471773756181803 };

		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		double[] outReal = new double[1];

		RetCode rc = core.tsf(0, 99, inputsinReal, 100, outBegIdx,
				outNBElement, outReal);
		assertArrayEquals(expect, outReal, 0);

		RetCode rb = core.tsf(-90, 99, inputsinReal, 100, outBegIdx,
				outNBElement, outReal);
		assertArrayEquals(expect, outReal, 0);
		assertEquals(RetCode.OutOfRangeStartIndex.toString(), rb.toString());

		RetCode rb1 = core.tsf(1230, 99, inputsinReal, 100, outBegIdx,
				outNBElement, outReal);
		assertArrayEquals(expect, outReal, 0);
		assertEquals(RetCode.OutOfRangeEndIndex.toString(), rb1.toString());

		RetCode rb2 = core.tsf(0, 99, inputsinReal, 1, outBegIdx, outNBElement,
				outReal);
		assertEquals(RetCode.BadParam.toString(), rb2.toString());

	}

	@Test
	public void testTsfFloat() {

		float[] inputsinReal = new float[] { 5.13f, 2.08f, -2.71f, 6.56f,
				5.29f, 3.3f, 6.33f, -2.52f, 1.5f, 4.83f, -2.37f, -2.86f,
				-1.33f, 5.55f, 6.81f, -2.75f, -3.6f, 0.57f, 9.07f, 5.01f,
				0.76f, 7.46f, -1.1f, -2.11f, -0.55f, 5.4f, -4.42f, 7.62f,
				3.73f, 7.23f, 2.79f, 4.63f, 3.53f, 1.42f, -4.22f, 9.9f, 9.76f,
				8.47f, 1.08f, 9f, 0.79f, -4.58f, -1.93f, 8.55f, 7.56f, 4.37f,
				-2.92f, -1.04f, -1.73f, 0.01f, 8.47f, -3.51f, 9.74f, 9.45f,
				2.59f, 6.46f, 5.27f, 5.96f, -3.67f, 3.11f, -3.55f, 9.95f,
				3.41f, 6.57f, 8.57f, 1.89f, 1.53f, 7.22f, 6.5f, 0.28f, 8.45f,
				1.02f, 1.42f, 4.39f, -1.57f, -1.12f, 4.79f, -3.62f, 3.77f,
				2.41f, 3.44f, 4.38f, 0.78f, 8.81f, 5.85f, -1.57f, -3.81f,
				4.59f, -0.53f, 1.86f, 3.76f, 2.6f, 0.59f, -3.23f, 6.78f, 3.97f,
				-0.25f, 3.9f, 1.13f, -0.86f };
		double[] expect = new double[] { 2.6288666741595126 };

		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		double[] outReal = new double[1];

		RetCode rc = core.tsf(0, 99, inputsinReal, 100, outBegIdx,
				outNBElement, outReal);
		assertArrayEquals(expect, outReal, 0);

		RetCode rb = core.tsf(-90, 99, inputsinReal, 100, outBegIdx,
				outNBElement, outReal);
		assertArrayEquals(expect, outReal, 0);
		assertEquals(RetCode.OutOfRangeStartIndex.toString(), rb.toString());

		RetCode rb1 = core.tsf(1230, 99, inputsinReal, 100, outBegIdx,
				outNBElement, outReal);
		assertArrayEquals(expect, outReal, 0);
		assertEquals(RetCode.OutOfRangeEndIndex.toString(), rb1.toString());

		RetCode rb2 = core.tsf(0, 99, inputsinReal, 1, outBegIdx, outNBElement,
				outReal);
		assertEquals(RetCode.BadParam.toString(), rb2.toString());

	}

	@Test
	public void testLinearRegFloat() {

		float[] inputsinReal = new float[] { 5.13f, 2.08f, -2.71f, 6.56f,
				5.29f, 3.3f, 6.33f, -2.52f, 1.5f, 4.83f, -2.37f, -2.86f,
				-1.33f, 5.55f, 6.81f, -2.75f, -3.6f, 0.57f, 9.07f, 5.01f,
				0.76f, 7.46f, -1.1f, -2.11f, -0.55f, 5.4f, -4.42f, 7.62f,
				3.73f, 7.23f, 2.79f, 4.63f, 3.53f, 1.42f, -4.22f, 9.9f, 9.76f,
				8.47f, 1.08f, 9f, 0.79f, -4.58f, -1.93f, 8.55f, 7.56f, 4.37f,
				-2.92f, -1.04f, -1.73f, 0.01f, 8.47f, -3.51f, 9.74f, 9.45f,
				2.59f, 6.46f, 5.27f, 5.96f, -3.67f, 3.11f, -3.55f, 9.95f,
				3.41f, 6.57f, 8.57f, 1.89f, 1.53f, 7.22f, 6.5f, 0.28f, 8.45f,
				1.02f, 1.42f, 4.39f, -1.57f, -1.12f, 4.79f, -3.62f, 3.77f,
				2.41f, 3.44f, 4.38f, 0.78f, 8.81f, 5.85f, -1.57f, -3.81f,
				4.59f, -0.53f, 1.86f, 3.76f, 2.6f, 0.59f, -3.23f, 6.78f, 3.97f,
				-0.25f, 3.9f, 1.13f, -0.86f };
		double[] expect = new double[] { 2.630615848989254 };

		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		double[] outReal = new double[1];

		RetCode rc = core.linearReg(0, 99, inputsinReal, 100, outBegIdx,
				outNBElement, outReal);
		assertArrayEquals(expect, outReal, 0);

		RetCode rb = core.linearReg(-90, 99, inputsinReal, 100, outBegIdx,
				outNBElement, outReal);
		assertArrayEquals(expect, outReal, 0);
		assertEquals(RetCode.OutOfRangeStartIndex.toString(), rb.toString());

		RetCode rb1 = core.linearReg(1230, 99, inputsinReal, 100, outBegIdx,
				outNBElement, outReal);
		assertArrayEquals(expect, outReal, 0);
		assertEquals(RetCode.OutOfRangeEndIndex.toString(), rb1.toString());

		RetCode rb2 = core.linearReg(0, 99, inputsinReal, 1, outBegIdx,
				outNBElement, outReal);
		assertEquals(RetCode.BadParam.toString(), rb2.toString());

	}

	@Test
	public void testLinearRegDouble() {

		double[] inputsinReal = new double[] { -3.74899758, 8.79802864,
				-0.14931231, -1.56997335, 8.905047, 2.43794917, -2.57177967,
				1.50790575, 6.28525889, -1.23445402, 9.88264006, -1.54691191,
				-1.51678414, -3.87081489, 4.07341677, -0.83149575, 6.45639026,
				-1.40668908, 8.34046177, 9.20368065, 1.97305676, 5.5028895,
				0.3892627, 6.70370615, 3.56699067, -2.57179387, 7.53523663,
				2.19858521, 5.48588226, 9.68097963, 7.19059048, 8.10866271,
				-4.529799, 6.25455656, -4.83669727, -1.99595817, 3.38484571,
				-1.7680024, 7.80204145, 6.92049361, 4.10760653, 5.48334737,
				2.01051649, -0.5360123, 6.4349846, -2.66170544, 1.19188141,
				7.91933993, -3.36841844, 2.38718663, 2.16506187, -0.2284759,
				9.99706536, -0.61847578, 9.21486081, -4.47503721, 3.76539438,
				9.18354848, 2.41393234, -4.37380726, 3.33243095, 9.37342345,
				2.10308501, 7.85515609, 1.46622299, -2.80063882, -2.75484542,
				-2.71461047, 7.27986801, 4.844885, 4.02320845, 3.95716224,
				8.23032752, 8.35721476, 2.20199541, 8.31864306, -1.95679191,
				5.96352889, 0.25646777, 5.35602973, 0.84101548, -0.48664477,
				3.94578672, 4.57081955, 8.89711142, 0.27538303, 8.15521628,
				-0.00423427, 2.04744304, 3.39087975, 6.80225727, -0.41025659,
				7.66486885, -3.10303327, -2.95132038, 6.28905328, -4.18467174,
				3.64449126, 4.01208808, 6.83494132 };
		double[] expect = new double[] { 3.2409710605504936 };

		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		double[] outReal = new double[1];

		RetCode rc = core.linearReg(0, 99, inputsinReal, 100, outBegIdx,
				outNBElement, outReal);

		assertArrayEquals(expect, outReal, 0);

		RetCode rb = core.linearReg(-90, 99, inputsinReal, 100, outBegIdx,
				outNBElement, outReal);
		assertArrayEquals(expect, outReal, 0);
		assertEquals(RetCode.OutOfRangeStartIndex.toString(), rb.toString());

		RetCode rb1 = core.linearReg(1230, 99, inputsinReal, 100, outBegIdx,
				outNBElement, outReal);
		assertArrayEquals(expect, outReal, 0);
		assertEquals(RetCode.OutOfRangeEndIndex.toString(), rb1.toString());

		RetCode rb2 = core.linearReg(0, 99, inputsinReal, 1, outBegIdx,
				outNBElement, outReal);
		assertEquals(RetCode.BadParam.toString(), rb2.toString());

	}

	@Test
	public void testLinearRegSlopeDouble() {

		double[] inputsinReal = new double[] { -3.74899758, 8.79802864,
				-0.14931231, -1.56997335, 8.905047, 2.43794917, -2.57177967,
				1.50790575, 6.28525889, -1.23445402, 9.88264006, -1.54691191,
				-1.51678414, -3.87081489, 4.07341677, -0.83149575, 6.45639026,
				-1.40668908, 8.34046177, 9.20368065, 1.97305676, 5.5028895,
				0.3892627, 6.70370615, 3.56699067, -2.57179387, 7.53523663,
				2.19858521, 5.48588226, 9.68097963, 7.19059048, 8.10866271,
				-4.529799, 6.25455656, -4.83669727, -1.99595817, 3.38484571,
				-1.7680024, 7.80204145, 6.92049361, 4.10760653, 5.48334737,
				2.01051649, -0.5360123, 6.4349846, -2.66170544, 1.19188141,
				7.91933993, -3.36841844, 2.38718663, 2.16506187, -0.2284759,
				9.99706536, -0.61847578, 9.21486081, -4.47503721, 3.76539438,
				9.18354848, 2.41393234, -4.37380726, 3.33243095, 9.37342345,
				2.10308501, 7.85515609, 1.46622299, -2.80063882, -2.75484542,
				-2.71461047, 7.27986801, 4.844885, 4.02320845, 3.95716224,
				8.23032752, 8.35721476, 2.20199541, 8.31864306, -1.95679191,
				5.96352889, 0.25646777, 5.35602973, 0.84101548, -0.48664477,
				3.94578672, 4.57081955, 8.89711142, 0.27538303, 8.15521628,
				-0.00423427, 2.04744304, 3.39087975, 6.80225727, -0.41025659,
				7.66486885, -3.10303327, -2.95132038, 6.28905328, -4.18467174,
				3.64449126, 4.01208808, 6.83494132 };
		double[] expect = new double[] { 0.006206315067686736 };

		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		double[] outReal = new double[1];

		RetCode rc = core.linearRegSlope(0, 99, inputsinReal, 100, outBegIdx,
				outNBElement, outReal);
		assertArrayEquals(expect, outReal, 0);

		RetCode rb = core.linearRegSlope(-90, 99, inputsinReal, 100, outBegIdx,
				outNBElement, outReal);
		assertArrayEquals(expect, outReal, 0);
		assertEquals(RetCode.OutOfRangeStartIndex.toString(), rb.toString());

		RetCode rb1 = core.linearRegSlope(1230, 99, inputsinReal, 100,
				outBegIdx, outNBElement, outReal);
		assertArrayEquals(expect, outReal, 0);
		assertEquals(RetCode.OutOfRangeEndIndex.toString(), rb1.toString());

		RetCode rb2 = core.linearRegSlope(0, 99, inputsinReal, 1, outBegIdx,
				outNBElement, outReal);
		assertEquals(RetCode.BadParam.toString(), rb2.toString());

	}

	@Test
	public void testLinearRegSlopeFloat() {

		float[] inputsinReal = new float[] { 5.13f, 2.08f, -2.71f, 6.56f,
				5.29f, 3.3f, 6.33f, -2.52f, 1.5f, 4.83f, -2.37f, -2.86f,
				-1.33f, 5.55f, 6.81f, -2.75f, -3.6f, 0.57f, 9.07f, 5.01f,
				0.76f, 7.46f, -1.1f, -2.11f, -0.55f, 5.4f, -4.42f, 7.62f,
				3.73f, 7.23f, 2.79f, 4.63f, 3.53f, 1.42f, -4.22f, 9.9f, 9.76f,
				8.47f, 1.08f, 9f, 0.79f, -4.58f, -1.93f, 8.55f, 7.56f, 4.37f,
				-2.92f, -1.04f, -1.73f, 0.01f, 8.47f, -3.51f, 9.74f, 9.45f,
				2.59f, 6.46f, 5.27f, 5.96f, -3.67f, 3.11f, -3.55f, 9.95f,
				3.41f, 6.57f, 8.57f, 1.89f, 1.53f, 7.22f, 6.5f, 0.28f, 8.45f,
				1.02f, 1.42f, 4.39f, -1.57f, -1.12f, 4.79f, -3.62f, 3.77f,
				2.41f, 3.44f, 4.38f, 0.78f, 8.81f, 5.85f, -1.57f, -3.81f,
				4.59f, -0.53f, 1.86f, 3.76f, 2.6f, 0.59f, -3.23f, 6.78f, 3.97f,
				-0.25f, 3.9f, 1.13f, -0.86f };
		double[] expect = new double[] { -0.0017491748297412118 };

		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		double[] outReal = new double[1];

		RetCode rc = core.linearRegSlope(0, 99, inputsinReal, 100, outBegIdx,
				outNBElement, outReal);
		assertArrayEquals(expect, outReal, 0);

		RetCode rb = core.linearRegSlope(-90, 99, inputsinReal, 100, outBegIdx,
				outNBElement, outReal);
		assertArrayEquals(expect, outReal, 0);
		assertEquals(RetCode.OutOfRangeStartIndex.toString(), rb.toString());

		RetCode rb1 = core.linearRegSlope(1230, 99, inputsinReal, 100,
				outBegIdx, outNBElement, outReal);
		assertArrayEquals(expect, outReal, 0);
		assertEquals(RetCode.OutOfRangeEndIndex.toString(), rb1.toString());

		RetCode rb2 = core.linearRegSlope(0, 99, inputsinReal, 1, outBegIdx,
				outNBElement, outReal);
		assertEquals(RetCode.BadParam.toString(), rb2.toString());

	}

	@Test
	public void testLinearRegInterceptFloat() {

		float[] inputsinReal = new float[] { 5.13f, 2.08f, -2.71f, 6.56f,
				5.29f, 3.3f, 6.33f, -2.52f, 1.5f, 4.83f, -2.37f, -2.86f,
				-1.33f, 5.55f, 6.81f, -2.75f, -3.6f, 0.57f, 9.07f, 5.01f,
				0.76f, 7.46f, -1.1f, -2.11f, -0.55f, 5.4f, -4.42f, 7.62f,
				3.73f, 7.23f, 2.79f, 4.63f, 3.53f, 1.42f, -4.22f, 9.9f, 9.76f,
				8.47f, 1.08f, 9f, 0.79f, -4.58f, -1.93f, 8.55f, 7.56f, 4.37f,
				-2.92f, -1.04f, -1.73f, 0.01f, 8.47f, -3.51f, 9.74f, 9.45f,
				2.59f, 6.46f, 5.27f, 5.96f, -3.67f, 3.11f, -3.55f, 9.95f,
				3.41f, 6.57f, 8.57f, 1.89f, 1.53f, 7.22f, 6.5f, 0.28f, 8.45f,
				1.02f, 1.42f, 4.39f, -1.57f, -1.12f, 4.79f, -3.62f, 3.77f,
				2.41f, 3.44f, 4.38f, 0.78f, 8.81f, 5.85f, -1.57f, -3.81f,
				4.59f, -0.53f, 1.86f, 3.76f, 2.6f, 0.59f, -3.23f, 6.78f, 3.97f,
				-0.25f, 3.9f, 1.13f, -0.86f };
		double[] expect = new double[] { 2.803784157133634 };

		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		double[] outReal = new double[1];

		RetCode rc = core.linearRegIntercept(0, 99, inputsinReal, 100,
				outBegIdx, outNBElement, outReal);
		assertArrayEquals(expect, outReal, 0);

		RetCode rb = core.linearRegIntercept(-90, 99, inputsinReal, 100,
				outBegIdx, outNBElement, outReal);
		assertArrayEquals(expect, outReal, 0);
		assertEquals(RetCode.OutOfRangeStartIndex.toString(), rb.toString());

		RetCode rb1 = core.linearRegIntercept(1230, 99, inputsinReal, 100,
				outBegIdx, outNBElement, outReal);
		assertArrayEquals(expect, outReal, 0);
		assertEquals(RetCode.OutOfRangeEndIndex.toString(), rb1.toString());

		RetCode rb2 = core.linearRegIntercept(0, 99, inputsinReal, 1,
				outBegIdx, outNBElement, outReal);
		assertEquals(RetCode.BadParam.toString(), rb2.toString());

	}

	@Test
	public void testLinearRegInterceptDouble() {

		double[] inputsinReal = new double[] { -3.74899758, 8.79802864,
				-0.14931231, -1.56997335, 8.905047, 2.43794917, -2.57177967,
				1.50790575, 6.28525889, -1.23445402, 9.88264006, -1.54691191,
				-1.51678414, -3.87081489, 4.07341677, -0.83149575, 6.45639026,
				-1.40668908, 8.34046177, 9.20368065, 1.97305676, 5.5028895,
				0.3892627, 6.70370615, 3.56699067, -2.57179387, 7.53523663,
				2.19858521, 5.48588226, 9.68097963, 7.19059048, 8.10866271,
				-4.529799, 6.25455656, -4.83669727, -1.99595817, 3.38484571,
				-1.7680024, 7.80204145, 6.92049361, 4.10760653, 5.48334737,
				2.01051649, -0.5360123, 6.4349846, -2.66170544, 1.19188141,
				7.91933993, -3.36841844, 2.38718663, 2.16506187, -0.2284759,
				9.99706536, -0.61847578, 9.21486081, -4.47503721, 3.76539438,
				9.18354848, 2.41393234, -4.37380726, 3.33243095, 9.37342345,
				2.10308501, 7.85515609, 1.46622299, -2.80063882, -2.75484542,
				-2.71461047, 7.27986801, 4.844885, 4.02320845, 3.95716224,
				8.23032752, 8.35721476, 2.20199541, 8.31864306, -1.95679191,
				5.96352889, 0.25646777, 5.35602973, 0.84101548, -0.48664477,
				3.94578672, 4.57081955, 8.89711142, 0.27538303, 8.15521628,
				-0.00423427, 2.04744304, 3.39087975, 6.80225727, -0.41025659,
				7.66486885, -3.10303327, -2.95132038, 6.28905328, -4.18467174,
				3.64449126, 4.01208808, 6.83494132 };
		double[] expect = new double[] { 2.6265458688495067 };

		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		double[] outReal = new double[1];

		RetCode rc = core.linearRegIntercept(0, 99, inputsinReal, 100,
				outBegIdx, outNBElement, outReal);
		assertArrayEquals(expect, outReal, 0);

		RetCode rb = core.linearRegIntercept(-90, 99, inputsinReal, 100,
				outBegIdx, outNBElement, outReal);
		assertArrayEquals(expect, outReal, 0);
		assertEquals(RetCode.OutOfRangeStartIndex.toString(), rb.toString());

		RetCode rb1 = core.linearRegIntercept(1230, 99, inputsinReal, 100,
				outBegIdx, outNBElement, outReal);
		assertArrayEquals(expect, outReal, 0);
		assertEquals(RetCode.OutOfRangeEndIndex.toString(), rb1.toString());

		RetCode rb2 = core.linearRegIntercept(0, 99, inputsinReal, 1,
				outBegIdx, outNBElement, outReal);
		assertEquals(RetCode.BadParam.toString(), rb2.toString());

	}

	@Test
	public void testLinearRegAngleFloat() {

		float[] inputsinReal = new float[] { 5.13f, 2.08f, -2.71f, 6.56f,
				5.29f, 3.3f, 6.33f, -2.52f, 1.5f, 4.83f, -2.37f, -2.86f,
				-1.33f, 5.55f, 6.81f, -2.75f, -3.6f, 0.57f, 9.07f, 5.01f,
				0.76f, 7.46f, -1.1f, -2.11f, -0.55f, 5.4f, -4.42f, 7.62f,
				3.73f, 7.23f, 2.79f, 4.63f, 3.53f, 1.42f, -4.22f, 9.9f, 9.76f,
				8.47f, 1.08f, 9f, 0.79f, -4.58f, -1.93f, 8.55f, 7.56f, 4.37f,
				-2.92f, -1.04f, -1.73f, 0.01f, 8.47f, -3.51f, 9.74f, 9.45f,
				2.59f, 6.46f, 5.27f, 5.96f, -3.67f, 3.11f, -3.55f, 9.95f,
				3.41f, 6.57f, 8.57f, 1.89f, 1.53f, 7.22f, 6.5f, 0.28f, 8.45f,
				1.02f, 1.42f, 4.39f, -1.57f, -1.12f, 4.79f, -3.62f, 3.77f,
				2.41f, 3.44f, 4.38f, 0.78f, 8.81f, 5.85f, -1.57f, -3.81f,
				4.59f, -0.53f, 1.86f, 3.76f, 2.6f, 0.59f, -3.23f, 6.78f, 3.97f,
				-0.25f, 3.9f, 1.13f, -0.86f };
		double[] expect = new double[] { -0.10022023316307363 };

		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		double[] outReal = new double[1];

		RetCode rc = core.linearRegAngle(0, 99, inputsinReal, 100, outBegIdx,
				outNBElement, outReal);
		assertArrayEquals(expect, outReal, 0);

		RetCode rb = core.linearRegAngle(-90, 99, inputsinReal, 100, outBegIdx,
				outNBElement, outReal);
		assertArrayEquals(expect, outReal, 0);
		assertEquals(RetCode.OutOfRangeStartIndex.toString(), rb.toString());

		RetCode rb1 = core.linearRegAngle(1230, 99, inputsinReal, 100,
				outBegIdx, outNBElement, outReal);
		assertArrayEquals(expect, outReal, 0);
		assertEquals(RetCode.OutOfRangeEndIndex.toString(), rb1.toString());

		RetCode rb2 = core.linearRegAngle(0, 99, inputsinReal, 1, outBegIdx,
				outNBElement, outReal);
		assertEquals(RetCode.BadParam.toString(), rb2.toString());

	}

	@Test
	public void testLinearRegAngleDouble() {

		double[] inputsinReal = new double[] { -3.74899758, 8.79802864,
				-0.14931231, -1.56997335, 8.905047, 2.43794917, -2.57177967,
				1.50790575, 6.28525889, -1.23445402, 9.88264006, -1.54691191,
				-1.51678414, -3.87081489, 4.07341677, -0.83149575, 6.45639026,
				-1.40668908, 8.34046177, 9.20368065, 1.97305676, 5.5028895,
				0.3892627, 6.70370615, 3.56699067, -2.57179387, 7.53523663,
				2.19858521, 5.48588226, 9.68097963, 7.19059048, 8.10866271,
				-4.529799, 6.25455656, -4.83669727, -1.99595817, 3.38484571,
				-1.7680024, 7.80204145, 6.92049361, 4.10760653, 5.48334737,
				2.01051649, -0.5360123, 6.4349846, -2.66170544, 1.19188141,
				7.91933993, -3.36841844, 2.38718663, 2.16506187, -0.2284759,
				9.99706536, -0.61847578, 9.21486081, -4.47503721, 3.76539438,
				9.18354848, 2.41393234, -4.37380726, 3.33243095, 9.37342345,
				2.10308501, 7.85515609, 1.46622299, -2.80063882, -2.75484542,
				-2.71461047, 7.27986801, 4.844885, 4.02320845, 3.95716224,
				8.23032752, 8.35721476, 2.20199541, 8.31864306, -1.95679191,
				5.96352889, 0.25646777, 5.35602973, 0.84101548, -0.48664477,
				3.94578672, 4.57081955, 8.89711142, 0.27538303, 8.15521628,
				-0.00423427, 2.04744304, 3.39087975, 6.80225727, -0.41025659,
				7.66486885, -3.10303327, -2.95132038, 6.28905328, -4.18467174,
				3.64449126, 4.01208808, 6.83494132 };
		double[] expect = new double[] { 0.3555910941601096 };

		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		double[] outReal = new double[1];

		RetCode rc = core.linearRegAngle(0, 99, inputsinReal, 100, outBegIdx,
				outNBElement, outReal);
		assertArrayEquals(expect, outReal, 0);

		RetCode rb = core.linearRegAngle(-90, 99, inputsinReal, 100, outBegIdx,
				outNBElement, outReal);
		assertArrayEquals(expect, outReal, 0);
		assertEquals(RetCode.OutOfRangeStartIndex.toString(), rb.toString());

		RetCode rb1 = core.linearRegAngle(1230, 99, inputsinReal, 100,
				outBegIdx, outNBElement, outReal);
		assertArrayEquals(expect, outReal, 0);
		assertEquals(RetCode.OutOfRangeEndIndex.toString(), rb1.toString());

		RetCode rb2 = core.linearRegAngle(0, 99, inputsinReal, 1, outBegIdx,
				outNBElement, outReal);
		assertEquals(RetCode.BadParam.toString(), rb2.toString());

	}

	@Test
	public void testAdDouble() {

		double[] inHigh = new double[] { -3.74899758, 8.79802864, -0.14931231,
				-1.56997335, 8.905047, 2.43794917, -2.57177967, 1.50790575,
				6.28525889, -1.23445402, 9.88264006, -1.54691191, -1.51678414,
				-3.87081489, 4.07341677, -0.83149575, 6.45639026, -1.40668908,
				8.34046177, 9.20368065, 1.97305676, 5.5028895, 0.3892627,
				6.70370615 };
		double[] inLow = new double[] { -2.57179387, 7.53523663, 2.19858521,
				5.48588226, 9.68097963, 7.19059048, 8.10866271, -4.529799,
				6.25455656, -4.83669727, -1.99595817, 3.38484571, -1.7680024,
				7.80204145, 6.92049361, 4.10760653, 5.48334737, 2.01051649,
				-0.5360123, 6.4349846, -2.66170544, 1.19188141, 7.91933993,
				-3.36841844 };
		double[] inClose = new double[] { 2.38718663, 2.16506187, -0.2284759,
				9.99706536, -0.61847578, 9.21486081, -4.47503721, 3.76539438,
				9.18354848, 2.41393234, -4.37380726, 3.33243095, 9.37342345,
				2.10308501, 7.85515609, 1.46622299, -2.80063882, -2.75484542,
				-2.71461047, 7.27986801, 4.844885, 4.02320845, 3.95716224,
				8.23032752, 8.35721476 };
		double[] inVolume = new double[] { 2.20199541, 8.31864306, -1.95679191,
				5.96352889, 0.25646777, 5.35602973, 0.84101548, -0.48664477,
				3.94578672, 4.57081955, 8.89711142, 0.27538303, 8.15521628,
				-0.00423427, 2.04744304, 3.39087975, 6.80225727, -0.41025659,
				7.66486885, -3.10303327, -2.95132038, 6.28905328, -4.18467174,
				3.64449126, 4.01208808 };
		double[] expect = new double[] { -79.07070142669991,
				-79.07070142669991, -79.07070142669991, -79.07070142669991,
				-79.07070142669991, -79.07070142669991, -79.92125767651315,
				668.9863983828114, 682.8159573031976, 670.3568113932618,
				670.3568113932618, 1385.5625281468142, 1385.5625281468142,
				1385.5625281468142, 1385.5625281468142, 1262.938438428078,
				1262.938438428078, 1251.5111140989734, 1252.7203307252137,
				1246.1115691014875, 1248.0833987685498, 1248.0833987685498,
				1252.8326734713237, 0.0 };

		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		double[] outReal = new double[24];

		RetCode rc = core.ad(1, 23, inHigh, inLow, inClose, inVolume,
				outBegIdx, outNBElement, outReal);

		assertArrayEquals(expect, outReal, 0);

		RetCode rb = core.ad(-90, 99, inHigh, inLow, inClose, inVolume,
				outBegIdx, outNBElement, outReal);
		assertArrayEquals(expect, outReal, 0);
		assertEquals(RetCode.OutOfRangeStartIndex.toString(), rb.toString());

		RetCode rb1 = core.ad(1230, -90, inHigh, inLow, inClose, inVolume,
				outBegIdx, outNBElement, outReal);
		assertArrayEquals(expect, outReal, 0);
		assertEquals(RetCode.OutOfRangeEndIndex.toString(), rb1.toString());

	}

	@Test
	public void testAdFloat() {
		float[] inHigh = new float[] { 5.13f, 2.08f, -2.71f, 6.56f, 5.29f,
				3.3f, 6.33f, -2.52f, 1.5f, 4.83f, -2.37f, -2.86f, -1.33f,
				5.55f, 6.81f, -2.75f, -3.6f, 0.57f, 9.07f, 5.01f, 0.76f, 7.46f,
				-1.1f, -2.11f };
		float[] inLow = new float[] { -0.55f, 5.4f, -4.42f, 7.62f, 3.73f,
				7.23f, 2.79f, 4.63f, 3.53f, 1.42f, -4.22f, 9.9f, 9.76f, 8.47f,
				1.08f, 9f, 0.79f, -4.58f, -1.93f, 8.55f, 7.56f, 4.37f, -2.92f,
				-1.04f, -1.73f, 0.01f, };
		float[] inClose = new float[] { 8.47f, -3.51f, 9.74f, 9.45f, 2.59f,
				6.46f, 5.27f, 5.96f, -3.67f, 3.11f, -3.55f, 9.95f, 3.41f,
				6.57f, 8.57f, 1.89f, 1.53f, 7.22f, 6.5f, 0.28f, 8.45f, 1.02f,
				1.42f, 4.39f, -1.57f, };
		float[] inVolume = new float[] { -1.12f, 4.79f, -3.62f, 3.77f, 2.41f,
				3.44f, 4.38f, 0.78f, 8.81f, 5.85f, -1.57f, -3.81f, 4.59f,
				-0.53f, 1.86f, 3.76f, 2.6f, 0.59f, -3.23f, 6.78f, 3.97f,
				-0.25f, 3.9f, 1.13f, -0.86f };
		double[] expect = new double[] { 0.0, -56.33227693742281,
				-56.33227693742281, -62.26458529433056, -62.26458529433056,
				-60.50763598255206, -60.50763598255206, -60.50763598255206,
				-60.55910241330319, -60.12629137148095, -60.12629137148095,
				-60.12629137148095, -60.12629137148095, -57.123673688349115,
				-57.123673688349115, -57.123673688349115, -55.009984483661306,
				-56.73069371488328, -56.73069371488328, -56.73069371488328,
				-55.93862255967202, -41.23862259320782, -41.23862259320782, 0.0 };

		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		double[] outReal = new double[24];

		RetCode rc = core.ad(1, 23, inHigh, inLow, inClose, inVolume,
				outBegIdx, outNBElement, outReal);

		assertArrayEquals(expect, outReal, 0);

		RetCode rb = core.ad(-90, 99, inHigh, inLow, inClose, inVolume,
				outBegIdx, outNBElement, outReal);
		assertArrayEquals(expect, outReal, 0);
		assertEquals(RetCode.OutOfRangeStartIndex.toString(), rb.toString());

		RetCode rb1 = core.ad(1230, -90, inHigh, inLow, inClose, inVolume,
				outBegIdx, outNBElement, outReal);
		assertArrayEquals(expect, outReal, 0);
		assertEquals(RetCode.OutOfRangeEndIndex.toString(), rb1.toString());

	}

	@Test
	public void testObvFloat() {
		float[] inReal = new float[] { 5.13f, 2.08f, -2.71f, 6.56f, 5.29f,
				3.3f, 6.33f, -2.52f, 1.5f, 4.83f, -2.37f, -2.86f, -1.33f,
				5.55f, 6.81f, -2.75f, -3.6f, 0.57f, 9.07f, 5.01f, 0.76f, 7.46f,
				-1.1f, -2.11f };
		float[] inVolume = new float[] { -1.12f, 4.79f, -3.62f, 3.77f, 2.41f,
				3.44f, 4.38f, 0.78f, 8.81f, 5.85f, -1.57f, -3.81f, 4.59f,
				-0.53f, 1.86f, 3.76f, 2.6f, 0.59f, -3.23f, 6.78f, 3.97f,
				-0.25f, 3.9f, 1.13f, -0.86f };
		double[] expect = new double[] { -1.1200000047683716,
				-5.909999966621399, -2.290000081062317, 1.4799998998641968,
				-0.9300001859664917, -4.370000243186951, 0.009999871253967285,
				-0.7700001001358032, 8.040000319480896, 13.890000224113464,
				15.460000276565552, 19.270000219345093, 23.860000371932983,
				23.330000400543213, 25.190000414848328, 21.43000042438507,
				18.830000519752502, 19.42000049352646, 16.190000474452972,
				9.410000264644623, 5.440000236034393, 5.190000236034393,
				1.2900001406669617, 0.16000014543533325 };

		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		double[] outReal = new double[24];

		RetCode rc = core.obv(0, 23, inReal, inVolume, outBegIdx, outNBElement,
				outReal);

		assertArrayEquals(expect, outReal, 0);

		RetCode rb = core.obv(-90, 99, inReal, inVolume, outBegIdx,
				outNBElement, outReal);
		assertArrayEquals(expect, outReal, 0);
		assertEquals(RetCode.OutOfRangeStartIndex.toString(), rb.toString());

		RetCode rb1 = core.obv(1230, -90, inReal, inVolume, outBegIdx,
				outNBElement, outReal);
		assertArrayEquals(expect, outReal, 0);
		assertEquals(RetCode.OutOfRangeEndIndex.toString(), rb1.toString());

	}

	@Test
	public void testObvDouble() {
		double[] inReal = new double[] { -3.74899758, 8.79802864, -0.14931231,
				-1.56997335, 8.905047, 2.43794917, -2.57177967, 1.50790575,
				6.28525889, -1.23445402, 9.88264006, -1.54691191, -1.51678414,
				-3.87081489, 4.07341677, -0.83149575, 6.45639026, -1.40668908,
				8.34046177, 9.20368065, 1.97305676, 5.5028895, 0.3892627,
				6.70370615 };
		double[] inVolume = new double[] { 2.20199541, 8.31864306, -1.95679191,
				5.96352889, 0.25646777, 5.35602973, 0.84101548, -0.48664477,
				3.94578672, 4.57081955, 8.89711142, 0.27538303, 8.15521628,
				-0.00423427, 2.04744304, 3.39087975, 6.80225727, -0.41025659,
				7.66486885, -3.10303327, -2.95132038, 6.28905328, -4.18467174,
				3.64449126, 4.01208808 };
		double[] expect = new double[] { 2.20199541, 10.52063847, 12.47743038,
				6.513901489999999, 6.770369259999999, 1.4143395299999986,
				0.5733240499999985, 0.08667927999999853, 4.0324659999999986,
				-0.5383535500000018, 8.358757869999998, 8.083374839999998,
				16.238591119999995, 16.242825389999997, 18.290268429999998,
				14.899388679999998, 21.70164595, 22.11190254, 29.77677139,
				26.67373812, 29.625058499999998, 35.91411178, 40.09878352,
				43.74327478 };

		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		double[] outReal = new double[24];

		RetCode rc = core.obv(0, 23, inReal, inVolume, outBegIdx, outNBElement,
				outReal);
		assertArrayEquals(expect, outReal, 0);

		RetCode rb = core.obv(-90, 99, inReal, inVolume, outBegIdx,
				outNBElement, outReal);
		assertArrayEquals(expect, outReal, 0);
		assertEquals(RetCode.OutOfRangeStartIndex.toString(), rb.toString());

		RetCode rb1 = core.obv(1230, -90, inReal, inVolume, outBegIdx,
				outNBElement, outReal);
		assertArrayEquals(expect, outReal, 0);
		assertEquals(RetCode.OutOfRangeEndIndex.toString(), rb1.toString());

	}
	@Test
	public void TA_INT_EMA_Float() {
		float[] inputsinReal = new float[] { 5.13f, 2.08f, -2.71f, 6.56f,
				5.29f, 3.3f, 6.33f, -2.52f, 1.5f, 4.83f, -2.37f, -2.86f,
				-1.33f, 5.55f, 6.81f, -2.75f, -3.6f, 0.57f, 9.07f, 5.01f,
				0.76f, 7.46f, -1.1f, -2.11f, -0.55f, 5.4f, -4.42f, 7.62f,
				3.73f, 7.23f, 2.79f, 4.63f, 3.53f, 1.42f, -4.22f, 9.9f, 9.76f,
				8.47f, 1.08f, 9f, 0.79f, -4.58f, -1.93f, 8.55f, 7.56f, 4.37f,
				-2.92f, -1.04f, -1.73f, 0.01f, 8.47f, -3.51f, 9.74f, 9.45f,
				2.59f, 6.46f, 5.27f, 5.96f, -3.67f, 3.11f, -3.55f, 9.95f,
				3.41f, 6.57f, 8.57f, 1.89f, 1.53f, 7.22f, 6.5f, 0.28f, 8.45f,
				1.02f, 1.42f, 4.39f, -1.57f, -1.12f, 4.79f, -3.62f, 3.77f,
				2.41f, 3.44f, 4.38f, 0.78f, 8.81f, 5.85f, -1.57f, -3.81f,
				4.59f, -0.53f, 1.86f, 3.76f, 2.6f, 0.59f, -3.23f, 6.78f, 3.97f,
				-0.25f, 3.9f, 1.13f, -0.86f };
		double optInK_1 = 2.20199541;
	
		double[] expect = new double[] {2.7172000030614436};

		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		double[] outReal = new double[1];

		RetCode rc = core.TA_INT_EMA(0, 99, inputsinReal, 100, optInK_1, outBegIdx, outNBElement, outReal);
		assertArrayEquals(expect, outReal, 0);


	}
	@Test
	public void TA_INT_EMA_Double() {
		double[] inputsinReal = new double[] { -3.74899758, 8.79802864,
				-0.14931231, -1.56997335, 8.905047, 2.43794917, -2.57177967,
				1.50790575, 6.28525889, -1.23445402, 9.88264006, -1.54691191,
				-1.51678414, -3.87081489, 4.07341677, -0.83149575, 6.45639026,
				-1.40668908, 8.34046177, 9.20368065, 1.97305676, 5.5028895,
				0.3892627, 6.70370615, 3.56699067, -2.57179387, 7.53523663,
				2.19858521, 5.48588226, 9.68097963, 7.19059048, 8.10866271,
				-4.529799, 6.25455656, -4.83669727, -1.99595817, 3.38484571,
				-1.7680024, 7.80204145, 6.92049361, 4.10760653, 5.48334737,
				2.01051649, -0.5360123, 6.4349846, -2.66170544, 1.19188141,
				7.91933993, -3.36841844, 2.38718663, 2.16506187, -0.2284759,
				9.99706536, -0.61847578, 9.21486081, -4.47503721, 3.76539438,
				9.18354848, 2.41393234, -4.37380726, 3.33243095, 9.37342345,
				2.10308501, 7.85515609, 1.46622299, -2.80063882, -2.75484542,
				-2.71461047, 7.27986801, 4.844885, 4.02320845, 3.95716224,
				8.23032752, 8.35721476, 2.20199541, 8.31864306, -1.95679191,
				5.96352889, 0.25646777, 5.35602973, 0.84101548, -0.48664477,
				3.94578672, 4.57081955, 8.89711142, 0.27538303, 8.15521628,
				-0.00423427, 2.04744304, 3.39087975, 6.80225727, -0.41025659,
				7.66486885, -3.10303327, -2.95132038, 6.28905328, -4.18467174,
				3.64449126, 4.01208808, 6.83494132 };
		double optInK_1 = 2.20199541;
	
		double[] expect = new double[] {2.9337584647};

		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		double[] outReal = new double[1];

		RetCode rc = core.TA_INT_EMA(0, 99, inputsinReal, 100, optInK_1, outBegIdx, outNBElement, outReal);
		assertArrayEquals(expect, outReal, 0);


	}
	@Test
	public void TA_INT_PO_Double() {
		double[] inputsinReal = new double[] { -3.74899758, 8.79802864,
				-0.14931231, -1.56997335, 8.905047, 2.43794917, -2.57177967,
				1.50790575, 6.28525889, -1.23445402, 9.88264006, -1.54691191,
				-1.51678414, -3.87081489, 4.07341677, -0.83149575, 6.45639026,
				-1.40668908, 8.34046177, 9.20368065, 1.97305676, 5.5028895,
				0.3892627, 6.70370615, 3.56699067, -2.57179387, 7.53523663,
				2.19858521, 5.48588226, 9.68097963, 7.19059048, 8.10866271,
				-4.529799, 6.25455656, -4.83669727, -1.99595817, 3.38484571,
				-1.7680024, 7.80204145, 6.92049361, 4.10760653, 5.48334737,
				2.01051649, -0.5360123, 6.4349846, -2.66170544, 1.19188141,
				7.91933993, -3.36841844, 2.38718663, 2.16506187, -0.2284759,
				9.99706536, -0.61847578, 9.21486081, -4.47503721, 3.76539438,
				9.18354848, 2.41393234, -4.37380726, 3.33243095, 9.37342345,
				2.10308501, 7.85515609, 1.46622299, -2.80063882, -2.75484542,
				-2.71461047, 7.27986801, 4.844885, 4.02320845, 3.95716224,
				8.23032752, 8.35721476, 2.20199541, 8.31864306, -1.95679191,
				5.96352889, 0.25646777, 5.35602973, 0.84101548, -0.48664477,
				3.94578672, 4.57081955, 8.89711142, 0.27538303, 8.15521628,
				-0.00423427, 2.04744304, 3.39087975, 6.80225727, -0.41025659,
				7.66486885, -3.10303327, -2.95132038, 6.28905328, -4.18467174,
				3.64449126, 4.01208808, 6.83494132 };
		
		int optInFastPeriod = 100;
		int optInSlowPeriod = 17;
		
	
		double[] expect = new double[] {-0.047235529263291554};

		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		
		
		double[] outReal = new double[1];

		RetCode rc = core.apo(0, 99, inputsinReal, optInFastPeriod, optInSlowPeriod, MAType.Ema, outBegIdx, outNBElement, outReal);
		assertArrayEquals(expect, outReal, 0);
		
		RetCode rb = core.apo(-90, 99,inputsinReal, optInFastPeriod, optInSlowPeriod, MAType.Ema, outBegIdx, outNBElement, outReal);
		assertArrayEquals(expect, outReal, 0);
		assertEquals(RetCode.OutOfRangeStartIndex.toString(), rb.toString());

		RetCode rb1 = core.apo(1230, -15, inputsinReal, optInFastPeriod, optInSlowPeriod, MAType.Ema, outBegIdx, outNBElement, outReal);
		assertArrayEquals(expect, outReal, 0);
		assertEquals(RetCode.OutOfRangeEndIndex.toString(), rb1.toString());

		RetCode rb2 = core.apo(0, 99,inputsinReal, 1, optInSlowPeriod, MAType.Ema, outBegIdx, outNBElement, outReal);
		assertEquals(RetCode.BadParam.toString(), rb2.toString());
		RetCode rb3 = core.apo(0, 99,inputsinReal, 100001, optInSlowPeriod, MAType.Ema, outBegIdx, outNBElement, outReal);
		assertEquals(RetCode.BadParam.toString(), rb2.toString());
		RetCode rb4 = core.apo(0, 99,inputsinReal, optInFastPeriod, 1, MAType.Ema, outBegIdx, outNBElement, outReal);
		assertEquals(RetCode.BadParam.toString(), rb2.toString());
		RetCode rb5 = core.apo(0, 99,inputsinReal, optInFastPeriod, 100001, MAType.Ema, outBegIdx, outNBElement, outReal);
		assertEquals(RetCode.BadParam.toString(), rb2.toString());


	}

	@Test
	public void TA_INT_PO_Float() {
		float[] inputsinReal = new float[] { 5.13f, 2.08f, -2.71f, 6.56f,
				5.29f, 3.3f, 6.33f, -2.52f, 1.5f, 4.83f, -2.37f, -2.86f,
				-1.33f, 5.55f, 6.81f, -2.75f, -3.6f, 0.57f, 9.07f, 5.01f,
				0.76f, 7.46f, -1.1f, -2.11f, -0.55f, 5.4f, -4.42f, 7.62f,
				3.73f, 7.23f, 2.79f, 4.63f, 3.53f, 1.42f, -4.22f, 9.9f, 9.76f,
				8.47f, 1.08f, 9f, 0.79f, -4.58f, -1.93f, 8.55f, 7.56f, 4.37f,
				-2.92f, -1.04f, -1.73f, 0.01f, 8.47f, -3.51f, 9.74f, 9.45f,
				2.59f, 6.46f, 5.27f, 5.96f, -3.67f, 3.11f, -3.55f, 9.95f,
				3.41f, 6.57f, 8.57f, 1.89f, 1.53f, 7.22f, 6.5f, 0.28f, 8.45f,
				1.02f, 1.42f, 4.39f, -1.57f, -1.12f, 4.79f, -3.62f, 3.77f,
				2.41f, 3.44f, 4.38f, 0.78f, 8.81f, 5.85f, -1.57f, -3.81f,
				4.59f, -0.53f, 1.86f, 3.76f, 2.6f, 0.59f, -3.23f, 6.78f, 3.97f,
				-0.25f, 3.9f, 1.13f, -0.86f };
		
		int optInFastPeriod = 100;
		int optInSlowPeriod = 17;
		
	
		double[] expect = new double[] {-0.9305008183641788};

		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		
		
		double[] outReal = new double[1];

		RetCode rc = core.apo(0, 99, inputsinReal, optInFastPeriod, optInSlowPeriod, MAType.Ema, outBegIdx, outNBElement, outReal);
		assertArrayEquals(expect, outReal, 0);
		
		RetCode rb = core.apo(-90, 99,inputsinReal, optInFastPeriod, optInSlowPeriod, MAType.Ema, outBegIdx, outNBElement, outReal);
		assertArrayEquals(expect, outReal, 0);
		assertEquals(RetCode.OutOfRangeStartIndex.toString(), rb.toString());

		RetCode rb1 = core.apo(1230, -15, inputsinReal, optInFastPeriod, optInSlowPeriod, MAType.Ema, outBegIdx, outNBElement, outReal);
		assertArrayEquals(expect, outReal, 0);
		assertEquals(RetCode.OutOfRangeEndIndex.toString(), rb1.toString());

		RetCode rb2 = core.apo(0, 99,inputsinReal, 1, optInSlowPeriod, MAType.Ema, outBegIdx, outNBElement, outReal);
		assertEquals(RetCode.BadParam.toString(), rb2.toString());
		RetCode rb3 = core.apo(0, 99,inputsinReal, 100001, optInSlowPeriod, MAType.Ema, outBegIdx, outNBElement, outReal);
		assertEquals(RetCode.BadParam.toString(), rb2.toString());
		RetCode rb4 = core.apo(0, 99,inputsinReal, optInFastPeriod, 1, MAType.Ema, outBegIdx, outNBElement, outReal);
		assertEquals(RetCode.BadParam.toString(), rb2.toString());
		RetCode rb5 = core.apo(0, 99,inputsinReal, optInFastPeriod, 100001, MAType.Ema, outBegIdx, outNBElement, outReal);
		assertEquals(RetCode.BadParam.toString(), rb2.toString());


	}
	@Test
	public void TA_INT_VAR_Float() {
		float[] inputsinReal = new float[] { 5.13f, 2.08f, -2.71f, 6.56f,
				5.29f, 3.3f, 6.33f, -2.52f, 1.5f, 4.83f, -2.37f, -2.86f,
				-1.33f, 5.55f, 6.81f, -2.75f, -3.6f, 0.57f, 9.07f, 5.01f,
				0.76f, 7.46f, -1.1f, -2.11f, -0.55f, 5.4f, -4.42f, 7.62f,
				3.73f, 7.23f, 2.79f, 4.63f, 3.53f, 1.42f, -4.22f, 9.9f, 9.76f,
				8.47f, 1.08f, 9f, 0.79f, -4.58f, -1.93f, 8.55f, 7.56f, 4.37f,
				-2.92f, -1.04f, -1.73f, 0.01f, 8.47f, -3.51f, 9.74f, 9.45f,
				2.59f, 6.46f, 5.27f, 5.96f, -3.67f, 3.11f, -3.55f, 9.95f,
				3.41f, 6.57f, 8.57f, 1.89f, 1.53f, 7.22f, 6.5f, 0.28f, 8.45f,
				1.02f, 1.42f, 4.39f, -1.57f, -1.12f, 4.79f, -3.62f, 3.77f,
				2.41f, 3.44f, 4.38f, 0.78f, 8.81f, 5.85f, -1.57f, -3.81f,
				4.59f, -0.53f, 1.86f, 3.76f, 2.6f, 0.59f, -3.23f, 6.78f, 3.97f,
				-0.25f, 3.9f, 1.13f, -0.86f };
		
	
		double[] expect = new double[] {16.98424204042898};

		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		
		
		double[] outReal = new double[1];

		RetCode rc = core.TA_INT_VAR(0, 99, inputsinReal, 100, outBegIdx, outNBElement, outReal);
		
		assertArrayEquals(expect, outReal, 0);
		
	

	}
	@Test
	public void TA_INT_VAR_Double() {
		double[] inputsinReal = new double[] { -3.74899758, 8.79802864,
				-0.14931231, -1.56997335, 8.905047, 2.43794917, -2.57177967,
				1.50790575, 6.28525889, -1.23445402, 9.88264006, -1.54691191,
				-1.51678414, -3.87081489, 4.07341677, -0.83149575, 6.45639026,
				-1.40668908, 8.34046177, 9.20368065, 1.97305676, 5.5028895,
				0.3892627, 6.70370615, 3.56699067, -2.57179387, 7.53523663,
				2.19858521, 5.48588226, 9.68097963, 7.19059048, 8.10866271,
				-4.529799, 6.25455656, -4.83669727, -1.99595817, 3.38484571,
				-1.7680024, 7.80204145, 6.92049361, 4.10760653, 5.48334737,
				2.01051649, -0.5360123, 6.4349846, -2.66170544, 1.19188141,
				7.91933993, -3.36841844, 2.38718663, 2.16506187, -0.2284759,
				9.99706536, -0.61847578, 9.21486081, -4.47503721, 3.76539438,
				9.18354848, 2.41393234, -4.37380726, 3.33243095, 9.37342345,
				2.10308501, 7.85515609, 1.46622299, -2.80063882, -2.75484542,
				-2.71461047, 7.27986801, 4.844885, 4.02320845, 3.95716224,
				8.23032752, 8.35721476, 2.20199541, 8.31864306, -1.95679191,
				5.96352889, 0.25646777, 5.35602973, 0.84101548, -0.48664477,
				3.94578672, 4.57081955, 8.89711142, 0.27538303, 8.15521628,
				-0.00423427, 2.04744304, 3.39087975, 6.80225727, -0.41025659,
				7.66486885, -3.10303327, -2.95132038, 6.28905328, -4.18467174,
				3.64449126, 4.01208808, 6.83494132 };
		
	
		double[] expect = new double[] {18.60908124901927};

		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		
		
		double[] outReal = new double[1];

		RetCode rc = core.TA_INT_VAR(0, 99, inputsinReal, 100, outBegIdx, outNBElement, outReal);
		
		assertArrayEquals(expect, outReal, 0);
		
	}
	
	@Test
	public void TA_INT_SMA_Double() {
		double[] inputsinReal = new double[] { -3.74899758, 8.79802864,
				-0.14931231, -1.56997335, 8.905047, 2.43794917, -2.57177967,
				1.50790575, 6.28525889, -1.23445402, 9.88264006, -1.54691191,
				-1.51678414, -3.87081489, 4.07341677, -0.83149575, 6.45639026,
				-1.40668908, 8.34046177, 9.20368065, 1.97305676, 5.5028895,
				0.3892627, 6.70370615, 3.56699067, -2.57179387, 7.53523663,
				2.19858521, 5.48588226, 9.68097963, 7.19059048, 8.10866271,
				-4.529799, 6.25455656, -4.83669727, -1.99595817, 3.38484571,
				-1.7680024, 7.80204145, 6.92049361, 4.10760653, 5.48334737,
				2.01051649, -0.5360123, 6.4349846, -2.66170544, 1.19188141,
				7.91933993, -3.36841844, 2.38718663, 2.16506187, -0.2284759,
				9.99706536, -0.61847578, 9.21486081, -4.47503721, 3.76539438,
				9.18354848, 2.41393234, -4.37380726, 3.33243095, 9.37342345,
				2.10308501, 7.85515609, 1.46622299, -2.80063882, -2.75484542,
				-2.71461047, 7.27986801, 4.844885, 4.02320845, 3.95716224,
				8.23032752, 8.35721476, 2.20199541, 8.31864306, -1.95679191,
				5.96352889, 0.25646777, 5.35602973, 0.84101548, -0.48664477,
				3.94578672, 4.57081955, 8.89711142, 0.27538303, 8.15521628,
				-0.00423427, 2.04744304, 3.39087975, 6.80225727, -0.41025659,
				7.66486885, -3.10303327, -2.95132038, 6.28905328, -4.18467174,
				3.64449126, 4.01208808, 6.83494132 };
		
	
		double[] expect = new double[] {2.9337584647};

		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		
		
		double[] outReal = new double[1];

		RetCode rc = core.sma(0, 99, inputsinReal, 100, outBegIdx, outNBElement, outReal);
		assertArrayEquals(expect, outReal, 0);
		
	}
	@Test
	public void TA_INT_SMA_Float() {
		float[] inputsinReal = new float[] { 5.13f, 2.08f, -2.71f, 6.56f,
				5.29f, 3.3f, 6.33f, -2.52f, 1.5f, 4.83f, -2.37f, -2.86f,
				-1.33f, 5.55f, 6.81f, -2.75f, -3.6f, 0.57f, 9.07f, 5.01f,
				0.76f, 7.46f, -1.1f, -2.11f, -0.55f, 5.4f, -4.42f, 7.62f,
				3.73f, 7.23f, 2.79f, 4.63f, 3.53f, 1.42f, -4.22f, 9.9f, 9.76f,
				8.47f, 1.08f, 9f, 0.79f, -4.58f, -1.93f, 8.55f, 7.56f, 4.37f,
				-2.92f, -1.04f, -1.73f, 0.01f, 8.47f, -3.51f, 9.74f, 9.45f,
				2.59f, 6.46f, 5.27f, 5.96f, -3.67f, 3.11f, -3.55f, 9.95f,
				3.41f, 6.57f, 8.57f, 1.89f, 1.53f, 7.22f, 6.5f, 0.28f, 8.45f,
				1.02f, 1.42f, 4.39f, -1.57f, -1.12f, 4.79f, -3.62f, 3.77f,
				2.41f, 3.44f, 4.38f, 0.78f, 8.81f, 5.85f, -1.57f, -3.81f,
				4.59f, -0.53f, 1.86f, 3.76f, 2.6f, 0.59f, -3.23f, 6.78f, 3.97f,
				-0.25f, 3.9f, 1.13f, -0.86f };
		
	
		double[] expect = new double[] {2.7172000030614436};

		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		
		
		double[] outReal = new double[1];

		RetCode rc = core.sma(0, 99, inputsinReal, 100, outBegIdx, outNBElement, outReal);
		assertArrayEquals(expect, outReal, 0);
		
	}
	
}
