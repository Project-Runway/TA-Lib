package piatek.jacek;

import static org.junit.Assert.*;

import org.junit.BeforeClass;
import org.junit.Test;

import com.tictactec.ta.lib.Core;
import com.tictactec.ta.lib.MInteger;
import com.tictactec.ta.lib.RetCode;

public class TestCore {

	static Core core;

	@BeforeClass
	public static void BeforeClass() {
		core = new Core();

	}

	@Test
	public void testMinMaxIndex() {
		double[] inputsinReal = new double[] { -3.74899758, 8.79802864,
				-0.14931231, -1.56997335, 8.905047, 2.43794917, -2.57177967,
				1.50790575, 6.28525889, -1.23445402, 9.88264006, -1.54691191,
				-1.51678414, -3.87081489, 4.07341677, -0.83149575, 6.45639026,
				-1.40668908, 8.34046177, 9.20368065, 1.97305676, 5.5028895,
				0.3892627, 6.70370615, 3.56699067, -2.57179387, 7.53523663,
				2.19858521, 5.48588226, 9.68097963, 7.19059048, 8.10866271,
				-4.529799, 6.25455656, -4.83669727, -1.99595817, 3.38484571,
				-1.7680024, 7.80204145, 6.92049361, 4.10760653, 5.48334737,
				2.01051649, -0.5360123, 6.4349846, -2.66170544, 1.19188141,
				7.91933993, -3.36841844, 2.38718663, 2.16506187, -0.2284759,
				9.99706536, -0.61847578, 9.21486081, -4.47503721, 3.76539438,
				9.18354848, 2.41393234, -4.37380726, 3.33243095, 9.37342345,
				2.10308501, 7.85515609, 1.46622299, -2.80063882, -2.75484542,
				-2.71461047, 7.27986801, 4.844885, 4.02320845, 3.95716224,
				8.23032752, 8.35721476, 2.20199541, 8.31864306, -1.95679191,
				5.96352889, 0.25646777, 5.35602973, 0.84101548, -0.48664477,
				3.94578672, 4.57081955, 8.89711142, 0.27538303, 8.15521628,
				-0.00423427, 2.04744304, 3.39087975, 6.80225727, -0.41025659,
				7.66486885, -3.10303327, -2.95132038, 6.28905328, -4.18467174,
				3.64449126, 4.01208808, 6.83494132};

		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		int[] outMinIdx = new int[1];
		int[] outMaxIdx = new int[1];
		/*
		 * Odejmujemy -1 od nr indeksu, który wyszed³ w excelu, poniewa¿ tutaj
		 * tablica liczy siê od 0, a w excelu o 1
		 */
		int[] expectedMin = { 35 - 1 };
		int[] expectedMax = { 53 - 1 };

		RetCode rc = core.minMaxIndex(0, 99, inputsinReal, 100, outBegIdx,
				outNBElement, outMinIdx, outMaxIdx);

		assertArrayEquals(expectedMin, outMinIdx);
		assertArrayEquals(expectedMax, outMaxIdx);
	}

	@Test
	public void testMinIndexDouble() {
		double[] inputsinReal = new double[] {-3.74899758, 8.79802864,
				-0.14931231, -1.56997335, 8.905047, 2.43794917, -2.57177967,
				1.50790575, 6.28525889, -1.23445402, 9.88264006, -1.54691191,
				-1.51678414, -3.87081489, 4.07341677, -0.83149575, 6.45639026,
				-1.40668908, 8.34046177, 9.20368065, 1.97305676, 5.5028895,
				0.3892627, 6.70370615, 3.56699067, -2.57179387, 7.53523663,
				2.19858521, 5.48588226, 9.68097963, 7.19059048, 8.10866271,
				-4.529799, 6.25455656, -4.83669727, -1.99595817, 3.38484571,
				-1.7680024, 7.80204145, 6.92049361, 4.10760653, 5.48334737,
				2.01051649, -0.5360123, 6.4349846, -2.66170544, 1.19188141,
				7.91933993, -3.36841844, 2.38718663, 2.16506187, -0.2284759,
				9.99706536, -0.61847578, 9.21486081, -4.47503721, 3.76539438,
				9.18354848, 2.41393234, -4.37380726, 3.33243095, 9.37342345,
				2.10308501, 7.85515609, 1.46622299, -2.80063882, -2.75484542,
				-2.71461047, 7.27986801, 4.844885, 4.02320845, 3.95716224,
				8.23032752, 8.35721476, 2.20199541, 8.31864306, -1.95679191,
				5.96352889, 0.25646777, 5.35602973, 0.84101548, -0.48664477,
				3.94578672, 4.57081955, 8.89711142, 0.27538303, 8.15521628,
				-0.00423427, 2.04744304, 3.39087975, 6.80225727, -0.41025659,
				7.66486885, -3.10303327, -2.95132038, 6.28905328, -4.18467174,
				3.64449126, 4.01208808, 6.83494132};
		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		int[] outInteger = new int[1];
		int[] expectedMin = { 35 - 1 };

		RetCode rc = core.minIndex(0, 99, inputsinReal, 100, outBegIdx,
				outNBElement, outInteger);
		assertArrayEquals(expectedMin, outInteger);
	}

	@Test
	public void testMaxIndexDouble() {
		double[] inputsinReal = new double[] {-3.74899758, 8.79802864,
				-0.14931231, -1.56997335, 8.905047, 2.43794917, -2.57177967,
				1.50790575, 6.28525889, -1.23445402, 9.88264006, -1.54691191,
				-1.51678414, -3.87081489, 4.07341677, -0.83149575, 6.45639026,
				-1.40668908, 8.34046177, 9.20368065, 1.97305676, 5.5028895,
				0.3892627, 6.70370615, 3.56699067, -2.57179387, 7.53523663,
				2.19858521, 5.48588226, 9.68097963, 7.19059048, 8.10866271,
				-4.529799, 6.25455656, -4.83669727, -1.99595817, 3.38484571,
				-1.7680024, 7.80204145, 6.92049361, 4.10760653, 5.48334737,
				2.01051649, -0.5360123, 6.4349846, -2.66170544, 1.19188141,
				7.91933993, -3.36841844, 2.38718663, 2.16506187, -0.2284759,
				9.99706536, -0.61847578, 9.21486081, -4.47503721, 3.76539438,
				9.18354848, 2.41393234, -4.37380726, 3.33243095, 9.37342345,
				2.10308501, 7.85515609, 1.46622299, -2.80063882, -2.75484542,
				-2.71461047, 7.27986801, 4.844885, 4.02320845, 3.95716224,
				8.23032752, 8.35721476, 2.20199541, 8.31864306, -1.95679191,
				5.96352889, 0.25646777, 5.35602973, 0.84101548, -0.48664477,
				3.94578672, 4.57081955, 8.89711142, 0.27538303, 8.15521628,
				-0.00423427, 2.04744304, 3.39087975, 6.80225727, -0.41025659,
				7.66486885, -3.10303327, -2.95132038, 6.28905328, -4.18467174,
				3.64449126, 4.01208808, 6.83494132};
		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		int[] outInteger = new int[1];
		int[] expectedMax = { 53 - 1 };

		RetCode rc = core.maxIndex(0, 99, inputsinReal, 100, outBegIdx,
				outNBElement, outInteger);
		assertArrayEquals(expectedMax, outInteger);
	}
	
	@Test
	public void testMinDouble() {
		double[] inputsinReal = new double[] {-3.74899758, 8.79802864,
				-0.14931231, -1.56997335, 8.905047, 2.43794917, -2.57177967,
				1.50790575, 6.28525889, -1.23445402, 9.88264006, -1.54691191,
				-1.51678414, -3.87081489, 4.07341677, -0.83149575, 6.45639026,
				-1.40668908, 8.34046177, 9.20368065, 1.97305676, 5.5028895,
				0.3892627, 6.70370615, 3.56699067, -2.57179387, 7.53523663,
				2.19858521, 5.48588226, 9.68097963, 7.19059048, 8.10866271,
				-4.529799, 6.25455656, -4.83669727, -1.99595817, 3.38484571,
				-1.7680024, 7.80204145, 6.92049361, 4.10760653, 5.48334737,
				2.01051649, -0.5360123, 6.4349846, -2.66170544, 1.19188141,
				7.91933993, -3.36841844, 2.38718663, 2.16506187, -0.2284759,
				9.99706536, -0.61847578, 9.21486081, -4.47503721, 3.76539438,
				9.18354848, 2.41393234, -4.37380726, 3.33243095, 9.37342345,
				2.10308501, 7.85515609, 1.46622299, -2.80063882, -2.75484542,
				-2.71461047, 7.27986801, 4.844885, 4.02320845, 3.95716224,
				8.23032752, 8.35721476, 2.20199541, 8.31864306, -1.95679191,
				5.96352889, 0.25646777, 5.35602973, 0.84101548, -0.48664477,
				3.94578672, 4.57081955, 8.89711142, 0.27538303, 8.15521628,
				-0.00423427, 2.04744304, 3.39087975, 6.80225727, -0.41025659,
				7.66486885, -3.10303327, -2.95132038, 6.28905328, -4.18467174,
				3.64449126, 4.01208808, 6.83494132};
		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		double[] outDouble = new double[1];
		double[] expectedMin = {-4.83669727};

		RetCode rc = core.min(0, 99, inputsinReal, 100, outBegIdx, outNBElement, outDouble);
		assertArrayEquals(expectedMin, outDouble, 0);
	}
	
	@Test
	public void testMaxDouble() {
		double[] inputsinReal = new double[] {-3.74899758, 8.79802864,
				-0.14931231, -1.56997335, 8.905047, 2.43794917, -2.57177967,
				1.50790575, 6.28525889, -1.23445402, 9.88264006, -1.54691191,
				-1.51678414, -3.87081489, 4.07341677, -0.83149575, 6.45639026,
				-1.40668908, 8.34046177, 9.20368065, 1.97305676, 5.5028895,
				0.3892627, 6.70370615, 3.56699067, -2.57179387, 7.53523663,
				2.19858521, 5.48588226, 9.68097963, 7.19059048, 8.10866271,
				-4.529799, 6.25455656, -4.83669727, -1.99595817, 3.38484571,
				-1.7680024, 7.80204145, 6.92049361, 4.10760653, 5.48334737,
				2.01051649, -0.5360123, 6.4349846, -2.66170544, 1.19188141,
				7.91933993, -3.36841844, 2.38718663, 2.16506187, -0.2284759,
				9.99706536, -0.61847578, 9.21486081, -4.47503721, 3.76539438,
				9.18354848, 2.41393234, -4.37380726, 3.33243095, 9.37342345,
				2.10308501, 7.85515609, 1.46622299, -2.80063882, -2.75484542,
				-2.71461047, 7.27986801, 4.844885, 4.02320845, 3.95716224,
				8.23032752, 8.35721476, 2.20199541, 8.31864306, -1.95679191,
				5.96352889, 0.25646777, 5.35602973, 0.84101548, -0.48664477,
				3.94578672, 4.57081955, 8.89711142, 0.27538303, 8.15521628,
				-0.00423427, 2.04744304, 3.39087975, 6.80225727, -0.41025659,
				7.66486885, -3.10303327, -2.95132038, 6.28905328, -4.18467174,
				3.64449126, 4.01208808, 6.83494132};
		MInteger outBegIdx = new MInteger();
		MInteger outNBElement = new MInteger();
		double[] outDouble = new double[1];
		double[] expectedMax = {9.99706536};

		RetCode rc = core.max(0, 99, inputsinReal, 100, outBegIdx, outNBElement, outDouble);
		assertArrayEquals(expectedMax, outDouble, 0);
	}

}
